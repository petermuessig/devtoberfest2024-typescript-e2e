'use strict';

const { setProp } = require('../../base/model');

const sqlServiceAnnotation = '@protocol';
// Problem: How can we clone a Symbol when sorting?
// const sqlServiceEntities = Symbol.for('SQL Service enabled entities');
/**
 * Find all entities in SQL services and mark them with an annotation and
 * remember them in a symbol property for easier processing in toSql-rendering.
 *
 * @param {CSN.Model} csn
 * @returns {Function}
 */
function processSqlServices(csn) {
  setProp(csn, '$sqlServiceEntities', Object.create(null));
  return function findAndMarkSqlServiceArtifacts(artifact, artifactName) {
    const sqlServiceName = isEntityInSqlService(artifact, artifactName, csn);
    if (sqlServiceName?.length > 0)
      setProp(artifact, '$sqlService', sqlServiceName);
  };
}

/**
 *
 * @param {CSN.Artifact} artifact
 * @returns {boolean}
 */
function isSqlService(artifact) {
  return artifact.kind === 'service' && artifact[sqlServiceAnnotation] === 'sql';
}
/**
 *
 * @param {CSN.Artifact} artifact
 * @param {string} artifactName
 * @param {CSN.Model} csn
 * @returns {string|null}
 */
function isEntityInSqlService(artifact, artifactName, csn) {
  if (artifact.kind !== 'entity' || !artifactName.includes('.'))
    return null;

  const nameParts = artifactName.split('.');
  for (let i = nameParts.length; i >= 0; i--) {
    const possibleServiceName = nameParts.slice(0, i).join('.');
    if (!csn.definitions[possibleServiceName])
      continue;

    const definition = csn.definitions[possibleServiceName];
    if (isSqlService(definition))
      return possibleServiceName;

    // We don't allow nested services/contexts - if we find one, we don't need to keep searching
    if (definition.kind === 'service' || definition.kind === 'context')
      return null;
  }

  return null;
}

module.exports = {
  processSqlServices, isSqlService, sqlServiceAnnotation,
};
