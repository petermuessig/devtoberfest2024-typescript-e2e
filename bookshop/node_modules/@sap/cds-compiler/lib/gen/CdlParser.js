// Parser generated by redepage v0.1.7
'use strict;'
const { XsnSource, XsnArtifact, XsnName } = require( '../compiler/xsn-model' );
const AstBuildingParser = require('../parsers/AstBuildingParser');
const keywords = {
  abstract: true,
  action: true,
  actions: true,
  all: false,
  and: true,
  annotate: true,
  annotation: true,
  any: false,
  array: true,
  as: false,
  asc: true,
  aspect: true,
  association: true,
  between: true,
  by: false,
  case: false,
  cast: false,
  columns: true,
  composition: true,
  context: true,
  cross: true,
  current: true,
  default: true,
  define: true,
  definitions: true,
  desc: true,
  distinct: true,
  element: true,
  elements: true,
  else: true,
  end: true,
  entity: true,
  enum: true,
  escape: true,
  event: true,
  exact: true,
  except: true,
  excluding: true,
  exists: false,
  extend: true,
  false: false,
  first: true,
  floating: true,
  following: true,
  from: false,
  full: true,
  function: true,
  group: true,
  having: true,
  in: false,
  inner: true,
  intersect: true,
  into: true,
  is: true,
  join: true,
  key: false,
  last: true,
  left: true,
  like: true,
  limit: true,
  localized: true,
  many: true,
  masked: true,
  minus: true,
  mixin: true,
  namespace: true,
  new: true,
  not: false,
  null: false,
  nulls: true,
  of: false,
  offset: true,
  on: false,
  one: true,
  or: true,
  order: true,
  outer: true,
  over: true,
  parameters: true,
  partition: true,
  preceding: true,
  projection: true,
  redirected: true,
  returns: true,
  right: true,
  row: true,
  rows: true,
  select: false,
  service: true,
  some: false,
  stored: true,
  then: true,
  to: true,
  true: false,
  type: true,
  unbounded: true,
  union: true,
  up: true,
  using: true,
  variable: true,
  view: true,
  virtual: true,
  when: true,
  where: false,
  with: false,
};
const table = [
  'start',
  /* 1 */ {
    namespace: [2,16],
    using: [2,19],
    '@': [2,10], type: '@', view: '@', event: '@', action: '@', aspect: '@', define: '@', entity: '@', extend: '@', context: '@', service: '@', abstract: '@', annotate: '@', function: '@', annotation: '@',
    '': 3
  },
  /* 2 */ {
    ';': ['c',1],
    EOF: 3,
    Id: ['g',1], '@': 'Id',
  },
  /* 3 */ ['m',0,'EOF'],
  'artifactsBlock',
  /* 5 */ ['m',6,'{'],
  /* 6 */ { Id: [7,10], '@': 'Id', '': 8 },
  /* 7 */ {
    ';': ['c',6],
    '}': 8,
    Id: ['g',6], '@': 'Id',
  },
  /* 8 */ ['m',0,'}'],
  'artifactDefOrExtend',
  /* 10 */ { '@': [10,769], '': 11 },
  /* 11 */ {
    define: ['ck',12],
    type: 12, view: 12, event: 12, action: 12, aspect: 12, entity: 12, context: 12, service: 12, abstract: 12, function: 12, annotation: 12,
    extend: ['ck',13],
    annotate: ['ck',14],
  },
  /* 12 */ {
    service: [0,44],
    context: [0,49],
    annotation: [0,54],
    type: [0,59],
    aspect: [0,64], abstract: 'aspect',
    entity: [0,77],
    view: [0,91],
    event: [0,103],
    action: [0,115],
    function: [0,121],
  },
  /* 13 */ {
    Id: [0,232],
    service: [0,254,1],
    context: [0,261,1],
    type: [0,268,1],
    aspect: [0,280,1], entity: 'aspect',
    projection: [0,291,1],
  },
  /* 14 */ [0,219],
  'namespaceDeclaration',
  /* 16 */ ['mk',17,'namespace'],
  /* 17 */ [0,36],
  'usingDeclaration',
  /* 19 */ ['mk',20,'using'],
  /* 20 */ {
    from: ['ck',21],
    Id: [22,32],
    '{': 24,
  },
  /* 21 */ ['m',0,'String'],
  /* 22 */ { from: ['ck',23], '': 0 },
  /* 23 */ ['m',0,'String'],
  /* 24 */ ['m',25,'{'],
  /* 25 */ { Id: 26 },
  /* 26 */ { Id: [27,32], '': 28 },
  /* 27 */ {
    ',': ['c',26],
    '}': 28,
  },
  /* 28 */ ['m',29,'}'],
  /* 29 */ { from: ['ck',30], '': 0 },
  /* 30 */ ['m',0,'String'],
  'usingProxy',
  /* 32 */ [33,40],
  /* 33 */ { as: ['ck',34], '': 0 },
  /* 34 */ ['mi',0],
  'namePath',
  /* 36 */ ['mi',37],
  /* 37 */ { '.': ['c',38], '': 0 },
  /* 38 */ ['miA',37],
  'simplePath',
  /* 40 */ ['mi',41],
  /* 41 */ { '.': ['c',42], '': 0 },
  /* 42 */ ['miA',41],
  'serviceDef',
  /* 44 */ ['mk',45,'service'],
  /* 45 */ [46,36],
  /* 46 */ { '@': [46,775], '': 47 },
  /* 47 */ { '{': [0,5], '': 0 },
  'contextDef',
  /* 49 */ ['mk',50,'context'],
  /* 50 */ [51,36],
  /* 51 */ { '@': [51,775], '': 52 },
  /* 52 */ { '{': [0,5], '': 0 },
  'annotationDef',
  /* 54 */ ['mk',55,'annotation'],
  /* 55 */ [56,36],
  /* 56 */ { '@': [56,775], '': 57 },
  /* 57 */ [0,350],
  'typeDef',
  /* 59 */ ['mk',60,'type'],
  /* 60 */ [61,36],
  /* 61 */ { '@': [61,775], '': 62 },
  /* 62 */ [0,350],
  'aspectDef',
  /* 64 */ {
    aspect: ['ck',66],
    abstract: ['ck',65],
  },
  /* 65 */ ['mk',66,'entity'],
  /* 66 */ [67,36],
  /* 67 */ { '@': [67,775], '': 68 },
  /* 68 */ {
    '{': [69,161],
    ':': ['c',70],
    '': 0
  },
  /* 69 */ { actions: [0,127], '': 0 },
  /* 70 */ [0,72],
  'aspectColonSpec',
  /* 72 */ { Id: [73,40], '': 74 },
  /* 73 */ { ',': ['c',72], '': 74 },
  /* 74 */ { '{': [75,161], '': 0 },
  /* 75 */ { actions: [0,127], '': 0 },
  'entityDef',
  /* 77 */ ['mk',78,'entity'],
  /* 78 */ [79,36],
  /* 79 */ { '@': [79,775], '': 80 },
  /* 80 */ { '(': [81,144], '': 81 },
  /* 81 */ {
    ':': ['c',82],
    '{': 85,
    as: ['ck',86],
  },
  /* 82 */ { Id: 83 },
  /* 83 */ { Id: [84,40], '': 85 },
  /* 84 */ {
    ',': ['c',83],
    '{': 85,
  },
  /* 85 */ [89,161],
  /* 86 */ {
    '(': [89,459], select: '(',
    projection: [87,453],
  },
  /* 87 */ { group: [88,602], where: 'group', having: 'group', '': 88 },
  /* 88 */ { limit: [89,614], order: 'limit', '': 89 },
  /* 89 */ { actions: [0,127], '': 0 },
  'viewDef',
  /* 91 */ ['mk',92,'view'],
  /* 92 */ [93,36],
  /* 93 */ { '@': [93,775], '': 94 },
  /* 94 */ {
    '(': [100,144],
    with: ['ck',95],
    '': 100
  },
  /* 95 */ ['mk',96,'parameters'],
  /* 96 */ [97,149],
  /* 97 */ { ',': ['c',98], '': 99 },
  /* 98 */ [97,149],
  /* 99 */ 100,
  /* 100 */ ['mk',101,'as'],
  /* 101 */ [0,459],
  'eventDef',
  /* 103 */ ['mk',104,'event'],
  /* 104 */ [105,36],
  /* 105 */ { '@': [105,775], '': 106 },
  /* 106 */ {
    '{': [0,161],
    ':': ['c',107],
  },
  /* 107 */ {
    '{': [0,161],
    Id: [108,40],
    projection: [0,453,1],
  },
  /* 108 */ { ',': 109, '{': 109, '': 113 },
  /* 109 */ { ',': ['c',110], '': 112 },
  /* 110 */ { Id: [111,40], '': 112 },
  /* 111 */ {
    ',': ['c',110],
    '{': 112,
  },
  /* 112 */ [0,161],
  /* 113 */ { '@': [113,769], '': 0 },
  'actionMainDef',
  /* 115 */ ['mk',116,'action'],
  /* 116 */ [117,36],
  /* 117 */ { '@': [117,775], '': 118 },
  /* 118 */ [119,144],
  /* 119 */ { returns: [0,157], '': 0 },
  'functionMainDef',
  /* 121 */ ['mk',122,'function'],
  /* 122 */ [123,36],
  /* 123 */ { '@': [123,775], '': 124 },
  /* 124 */ [125,144],
  /* 125 */ [0,157],
  'actionsBlock',
  /* 127 */ ['mk',128,'actions'],
  /* 128 */ ['m',129,'{'],
  /* 129 */ { Id: [130,133], '@': 'Id', '': 131 },
  /* 130 */ {
    ';': ['c',129],
    '}': 131,
    Id: ['g',129], '@': 'Id',
  },
  /* 131 */ ['m',0,'}'],
  'boundActionFunctionDef',
  /* 133 */ { '@': [133,769], '': 134 },
  /* 134 */ {
    action: ['ck',135],
    function: ['ck',139],
  },
  /* 135 */ ['mi',136],
  /* 136 */ { '@': [136,775], '': 137 },
  /* 137 */ [138,144],
  /* 138 */ { returns: [0,157], '': 0 },
  /* 139 */ ['mi',140],
  /* 140 */ { '@': [140,775], '': 141 },
  /* 141 */ [142,144],
  /* 142 */ [0,157],
  'paramsList',
  /* 144 */ ['m',145,'('],
  /* 145 */ { Id: [146,149], '@': 'Id', '': 147 },
  /* 146 */ {
    ',': ['c',145],
    ')': 147,
  },
  /* 147 */ ['m',0,')'],
  'paramDef',
  /* 149 */ { '@': [149,769], '': 150 },
  /* 150 */ ['miA',151],
  /* 151 */ { '@': [151,775], '': 152 },
  /* 152 */ {
    '{': [153,161],
    ':': ['c',154],
  },
  /* 153 */ { not: [0,446], null: 'not', '': 0 },
  /* 154 */ [155,365],
  /* 155 */ { '@': [155,769], '': 0 },
  'returnsSpec',
  /* 157 */ ['mk',158,'returns'],
  /* 158 */ { '@': [158,769], '': 159 },
  /* 159 */ [0,365],
  'elementsBlock',
  /* 161 */ ['m',162,'{'],
  /* 162 */ { Id: [163,166], '@': 'Id', '': 164 },
  /* 163 */ {
    ';': ['c',162],
    '}': 164,
    Id: ['g',162], '@': 'Id',
  },
  /* 164 */ ['m',0,'}'],
  'elementDef',
  /* 166 */ { '@': [166,769], '': 167 },
  /* 167 */ { virtual: ['ck',168,1], '': 168 },
  /* 168 */ { key: ['ck',169], '': 169 },
  /* 169 */ { masked: ['ck',170,1], '': 170 },
  /* 170 */ { element: ['ck',171,1], '': 171 },
  /* 171 */ ['mi',172],
  /* 172 */ { '@': [172,775], '': 173 },
  /* 173 */ {
    '{': [174,161],
    ':': ['c',175],
    '': 176
  },
  /* 174 */ { not: [176,446], null: 'not', '': 176 },
  /* 175 */ [176,365],
  /* 176 */ { '=': ['c',177], '': 179 },
  /* 177 */ [178,642],
  /* 178 */ { stored: ['ck',179], '': 179 },
  /* 179 */ 180,
  /* 180 */ { '@': [180,769], '': 0 },
  'enumSymbolsBlock',
  /* 182 */ ['mk',183,'enum'],
  /* 183 */ ['m',184,'{'],
  /* 184 */ { Id: [185,188], '@': 'Id', '': 186 },
  /* 185 */ {
    ';': ['c',184],
    '}': 186,
  },
  /* 186 */ ['m',0,'}'],
  'enumSymbolDef',
  /* 188 */ { '@': [188,769], '': 189 },
  /* 189 */ ['mi',190],
  /* 190 */ { '@': [190,769], '': 191 },
  /* 191 */ { '=': ['c',192], '': 0 },
  /* 192 */ {
    String: ['c',194],
    Number: ['c',194],
    '+': ['c',193], '-': '+',
    Id: [194,766], '#': 'Id', QuotedLiteral: 'Id',
  },
  /* 193 */ ['m',194,'Number'],
  /* 194 */ 195,
  /* 195 */ { '@': [195,769], '': 0 },
  'foreignKeysBlock',
  /* 197 */ ['m',198,'{'],
  /* 198 */ { Id: [199,202], '@': 'Id', '': 200 },
  /* 199 */ {
    ',': ['c',198],
    '}': 200,
  },
  /* 200 */ ['m',0,'}'],
  'foreignKeyDef',
  /* 202 */ { '@': [202,769], '': 203 },
  /* 203 */ [204,40],
  /* 204 */ { as: ['ck',205], '': 0 },
  /* 205 */ ['mi',0],
  'mixinElementDef',
  /* 207 */ ['mi',208],
  /* 208 */ ['m',209,':'],
  /* 209 */ {
    association: ['ck',210],
    composition: ['ck',212],
  },
  /* 210 */ { '[': [211,428], '': 211 },
  /* 211 */ ['mk',214,'to'],
  /* 212 */ { '[': [213,428], '': 213 },
  /* 213 */ ['mk',214,'of'],
  /* 214 */ { one: ['ck',215,1], many: 'one', '': 215 },
  /* 215 */ [216,40],
  /* 216 */ ['mk',217,'on'],
  /* 217 */ [0,634],
  'annotateArtifact',
  /* 219 */ [220,36],
  /* 220 */ {
    ':': ['c',221],
    with: ['ck',226],
    '': 226
  },
  /* 221 */ [222,36],
  /* 222 */ { with: ['ck',223], '': 223 },
  /* 223 */ 224,
  /* 224 */ { '@': [224,769], '': 225 },
  /* 225 */ { '{': [0,324], '': 0 },
  /* 226 */ 227,
  /* 227 */ { '@': [227,769], '': 228 },
  /* 228 */ { '(': [229,311], '': 229 },
  /* 229 */ {
    returns: [0,320],
    '{': [230,324],
    '': 230
  },
  /* 230 */ { actions: [0,299], '': 0 },
  'extendArtifact',
  /* 232 */ [233,36],
  /* 233 */ {
    ':': ['c',234],
    with: ['ck',243],
    '': 240
  },
  /* 234 */ [235,36],
  /* 235 */ { with: ['ck',236], '': 236 },
  /* 236 */ 237,
  /* 237 */ { '@': [237,769], '': 238 },
  /* 238 */ {
    elements: ['ck',239],
    '{': 239,
    enum: [0,182],
    '(': [0,419],
    '': 0
  },
  /* 239 */ [0,334],
  /* 240 */ { '@': [240,769], '': 241 },
  /* 241 */ { '{': [242,334], '': 0 },
  /* 242 */ { actions: [0,127], '': 0 },
  /* 243 */ { '@': [243,769], '': 244 },
  /* 244 */ {
    Id: [245,40],
    elements: ['ck',249,1],
    '{': 249,
    actions: [0,127,1],
    enum: [0,182,1],
    '(': [0,419],
    columns: ['ck',251,1],
    definitions: ['ck',252,1],
    '': 0
  },
  /* 245 */ { ',': ['c',246], '': 247 },
  /* 246 */ [245,40],
  /* 247 */ { '{': [248,334], '': 248 },
  /* 248 */ { actions: [0,127], '': 0 },
  /* 249 */ [250,334],
  /* 250 */ { actions: [0,127], '': 0 },
  /* 251 */ [0,563],
  /* 252 */ [0,5],
  'extendService',
  /* 254 */ ['mk',255,'service'],
  /* 255 */ [256,36],
  /* 256 */ { with: ['ck',257], '': 257 },
  /* 257 */ 258,
  /* 258 */ { '@': [258,769], '': 259 },
  /* 259 */ { '{': [0,5], '': 0 },
  'extendContext',
  /* 261 */ ['mk',262,'context'],
  /* 262 */ [263,36],
  /* 263 */ { with: ['ck',264], '': 264 },
  /* 264 */ 265,
  /* 265 */ { '@': [265,769], '': 266 },
  /* 266 */ { '{': [0,5], '': 0 },
  'extendType',
  /* 268 */ ['mk',269,'type'],
  /* 269 */ [270,36],
  /* 270 */ { with: ['ck',273], '': 271 },
  /* 271 */ { '@': [271,769], '': 272 },
  /* 272 */ { '{': [0,334], '': 0 },
  /* 273 */ { '@': [273,769], '': 274 },
  /* 274 */ {
    Id: [275,40],
    elements: ['ck',278,1],
    '{': 278,
    enum: [0,182,1],
    '(': [0,419],
    '': 0
  },
  /* 275 */ { ',': ['c',276], '': 277 },
  /* 276 */ [275,40],
  /* 277 */ { '{': [0,334], '': 0 },
  /* 278 */ [0,334],
  'extendEntityOrAspect',
  /* 280 */ { aspect: ['ck',281], entity: 'aspect' },
  /* 281 */ [282,36],
  /* 282 */ { with: ['ck',284], '': 283 },
  /* 283 */ { '@': [283,769], '': 288 },
  /* 284 */ { '@': [284,769], '': 285 },
  /* 285 */ {
    Id: [286,40],
    actions: ['g',288,1],
    '': 288
  },
  /* 286 */ { ',': ['c',287], '': 288 },
  /* 287 */ [286,40],
  /* 288 */ { '{': [289,334], '': 289 },
  /* 289 */ { actions: [0,127], '': 0 },
  'extendProjection',
  /* 291 */ ['mk',292,'projection'],
  /* 292 */ [293,36],
  /* 293 */ { with: ['ck',294], '': 294 },
  /* 294 */ 295,
  /* 295 */ { '@': [295,769], '': 296 },
  /* 296 */ { '{': [297,563], '': 297 },
  /* 297 */ { actions: [0,127], '': 0 },
  'annotateActionsBlock',
  /* 299 */ ['mk',300,'actions'],
  /* 300 */ ['m',301,'{'],
  /* 301 */ { Id: [302,305], '@': 'Id', '': 303 },
  /* 302 */ {
    ';': ['c',301],
    '}': 303,
    Id: ['g',301], '@': 'Id',
  },
  /* 303 */ ['m',0,'}'],
  'annotateBoundAction',
  /* 305 */ { '@': [305,769], '': 306 },
  /* 306 */ ['mi',307],
  /* 307 */ { '@': [307,769], '': 308 },
  /* 308 */ { '(': [309,311], '': 309 },
  /* 309 */ { returns: [0,320,1], '': 0 },
  'annotateParamsBlock',
  /* 311 */ ['m',312,'('],
  /* 312 */ { Id: [313,316], '@': 'Id', '': 314 },
  /* 313 */ {
    ',': ['c',312],
    ')': 314,
  },
  /* 314 */ ['m',0,')'],
  'annotateParam',
  /* 316 */ { '@': [316,769], '': 317 },
  /* 317 */ ['mi',318],
  /* 318 */ { '@': [318,769], '': 0 },
  'annotateReturns',
  /* 320 */ ['mk',321,'returns'],
  /* 321 */ { '@': [321,769], '': 322 },
  /* 322 */ { '{': [0,324], '': 0 },
  'annotateElementsBlock',
  /* 324 */ ['m',325,'{'],
  /* 325 */ { Id: [326,329], '@': 'Id', '': 327 },
  /* 326 */ {
    ';': ['c',325],
    '}': 327,
    Id: ['g',325], '@': 'Id',
  },
  /* 327 */ ['m',0,'}'],
  'annotateElement',
  /* 329 */ { '@': [329,769], '': 330 },
  /* 330 */ ['mi',331],
  /* 331 */ { '@': [331,769], '': 332 },
  /* 332 */ { '{': [0,324], '': 0 },
  'extendElementsBlock',
  /* 334 */ ['m',335,'{'],
  /* 335 */ { Id: [336,339], '@': 'Id', '': 337 },
  /* 336 */ {
    ';': ['c',335],
    '}': 337,
    Id: ['g',335], '@': 'Id',
  },
  /* 337 */ ['m',0,'}'],
  'elementDefOrExtend',
  /* 339 */ { '@': [339,769], '': 340 },
  /* 340 */ {
    Id: [0,166], '@': 'Id', key: 'Id',
    extend: ['ck',341,1],
  },
  /* 341 */ { element: ['ck',342,1], '': 342 },
  /* 342 */ ['mi',343],
  /* 343 */ { with: ['ck',346], '': 344 },
  /* 344 */ { '@': [344,769], '': 345 },
  /* 345 */ { '{': [0,334], '': 0 },
  /* 346 */ { '@': [346,769], '': 347 },
  /* 347 */ {
    elements: ['ck',348],
    '{': 348,
    enum: [0,182],
    '(': [0,419],
    '': 0
  },
  /* 348 */ [0,334],
  'typeOrIncludesSpec',
  /* 350 */ {
    '{': [351,161],
    ':': ['c',352],
  },
  /* 351 */ { not: [0,446], null: 'not', '': 0 },
  /* 352 */ {
    '{': [0,365,1], many: '{', type: '{', array: '{', localized: '{', association: '{', composition: '{',
    Id: [353,40],
  },
  /* 353 */ {
    '(': [354,408], ':': '(',
    ',': 359, '{': 359,
    '': 354
  },
  /* 354 */ { not: [355,446], null: 'not', '': 355 },
  /* 355 */ 356,
  /* 356 */ { '@': [356,769], '': 357 },
  /* 357 */ { enum: [358,182], '': 358 },
  /* 358 */ { not: [0,440], null: 'not', default: 'not', '': 0 },
  /* 359 */ { ',': ['c',360], '': 362 },
  /* 360 */ { Id: [361,40], '': 362 },
  /* 361 */ {
    ',': ['c',360],
    '{': 362,
  },
  /* 362 */ [363,161],
  /* 363 */ { not: [0,446], null: 'not', '': 0 },
  'typeExpression',
  /* 365 */ {
    '{': [366,161],
    Id: [367,407],
    type: [367,399,1],
    localized: ['ck',372,1],
    association: ['ck',375,1],
    composition: ['ck',382,1],
    array: ['ck',390,1],
    many: ['ck',391,1],
  },
  /* 366 */ { not: [0,446], null: 'not', '': 0 },
  /* 367 */ { not: [368,446], null: 'not', '': 368 },
  /* 368 */ 369,
  /* 369 */ { '@': [369,769], '': 370 },
  /* 370 */ { enum: [371,182], '': 371 },
  /* 371 */ { not: [0,440], null: 'not', default: 'not', '': 0 },
  /* 372 */ [373,407],
  /* 373 */ { '@': [373,769], '': 374 },
  /* 374 */ { not: [0,440], null: 'not', default: 'not', '': 0 },
  /* 375 */ { '[': [376,428], '': 376 },
  /* 376 */ ['mk',377,'to'],
  /* 377 */ { one: ['ck',378,1], many: 'one', '': 378 },
  /* 378 */ [379,40],
  /* 379 */ {
    on: ['ck',380],
    '{': [381,197],
    '': 381
  },
  /* 380 */ [0,634],
  /* 381 */ { not: [0,440], null: 'not', default: 'not', '': 0 },
  /* 382 */ { '[': [383,428], '': 383 },
  /* 383 */ ['mk',384,'of'],
  /* 384 */ { one: ['ck',385,1], many: 'one', '': 385 },
  /* 385 */ {
    Id: [386,40],
    '{': 389,
  },
  /* 386 */ {
    on: ['ck',387],
    '{': [388,197],
    '': 388
  },
  /* 387 */ [0,634],
  /* 388 */ { not: [0,440], null: 'not', default: 'not', '': 0 },
  /* 389 */ [0,161],
  /* 390 */ ['mk',391,'of'],
  /* 391 */ {
    '{': [392,161],
    Id: [393,407],
    type: [393,399,1],
  },
  /* 392 */ { not: [0,446], null: 'not', '': 0 },
  /* 393 */ { not: [394,446], null: 'not', '': 394 },
  /* 394 */ 395,
  /* 395 */ { '@': [395,769], '': 396 },
  /* 396 */ { enum: [397,182], '': 397 },
  /* 397 */ { not: [0,446], null: 'not', '': 0 },
  'typeTypeOf',
  /* 399 */ ['mk',400,'type'],
  /* 400 */ ['mk',401,'of'],
  /* 401 */ [402,40],
  /* 402 */ { ':': ['c',403], '': 0 },
  /* 403 */ ['miA',404],
  /* 404 */ { '.': ['c',405], '': 0 },
  /* 405 */ ['miA',404],
  'typeRefOptArgs',
  /* 407 */ [408,40],
  /* 408 */ {
    ':': ['c',409],
    '(': ['c',412],
    '': 0
  },
  /* 409 */ ['miA',410],
  /* 410 */ { '.': ['c',411], '': 0 },
  /* 411 */ ['miA',410],
  /* 412 */ {
    Number: ['c',413],
    Id: 415,
  },
  /* 413 */ { ',': ['c',414], '': 417 },
  /* 414 */ {
    Number: ['c',413],
    floating: ['ck',413], variable: 'floating',
    ')': 417,
  },
  /* 415 */ { Id: [416,424], '': 417 },
  /* 416 */ {
    ',': ['c',415],
    ')': 417,
  },
  /* 417 */ ['m',0,')'],
  'typeNamedArgsList',
  /* 419 */ ['m',420,'('],
  /* 420 */ { Id: [421,424], '': 422 },
  /* 421 */ {
    ',': ['c',420],
    ')': 422,
  },
  /* 422 */ ['m',0,')'],
  'typeNamedArg',
  /* 424 */ ['mi',425],
  /* 425 */ ['m',426,':'],
  /* 426 */ {
    Number: ['c',0],
    floating: ['ck',0], variable: 'floating',
  },
  'cardinality',
  /* 428 */ ['m',429,'['],
  /* 429 */ {
    '*': ['c',430],
    Number: ['c',432],
    '': 434
  },
  /* 430 */ { ',': ['c',431], '': 434 },
  /* 431 */ [434,436],
  /* 432 */ {
    ',': ['c',433],
    '..': [434,437],
    '': 434
  },
  /* 433 */ [434,436],
  /* 434 */ ['m',0,']'],
  'targetCardinality',
  /* 436 */ {
    '*': ['c',0],
    Number: ['c',437],
  },
  /* 437 */ { '..': ['c',438], '': 0 },
  /* 438 */ {
    '*': ['c',0],
    Number: ['c',0],
  },
  'nullabilityAndDefault',
  /* 440 */ {
    not: [441,446], null: 'not',
    default: ['ck',443],
  },
  /* 441 */ { default: ['ck',442], '': 0 },
  /* 442 */ [0,642],
  /* 443 */ [444,642],
  /* 444 */ { not: [0,446], null: 'not', '': 0 },
  'nullability',
  /* 446 */ {
    null: ['ck',0],
    not: ['ck',447],
  },
  /* 447 */ ['mk',0,'null'],
  'queryEOF',
  /* 449 */ [450,459],
  /* 450 */ { ';': ['c',451], '': 451 },
  /* 451 */ ['m',0,'EOF'],
  'projectionSpec',
  /* 453 */ ['mk',454,'projection'],
  /* 454 */ ['mk',455,'on'],
  /* 455 */ [456,518],
  /* 456 */ { '{': [457,563], '': 457 },
  /* 457 */ { excluding: [0,556], '': 0 },
  'queryExpression',
  /* 459 */ {
    '(': ['c',460],
    Id: [462,469],
  },
  /* 460 */ [461,459],
  /* 461 */ ['m',462,')'],
  /* 462 */ {
    intersect: ['ck',463],
    minus: ['ck',463], except: 'minus',
    union: ['ck',464],
    '': 466
  },
  /* 463 */ { distinct: ['ck',465], '': 465 },
  /* 464 */ { all: ['ck',465], distinct: 'all', '': 465 },
  /* 465 */ [462,459],
  /* 466 */ { limit: ['g',467], order: 'limit', '': 0 },
  /* 467 */ [0,614],
  'selectQuery',
  /* 469 */ ['mk',470,'select'],
  /* 470 */ {
    from: ['ck',471],
    all: ['ck',481,1], distinct: 'all',
    Id: 481, '#': 481, '(': 481, '*': 481, '+': 481, '-': 481, ':': 481, '?': 481, '@': 481, '{': 481, key: 481, not: 481, case: 481, cast: 481, null: 481, true: 481, false: 481, Number: 481, String: 481, exists: 481, QuotedLiteral: 481,
  },
  /* 471 */ [472,488],
  /* 472 */ { mixin: ['ck',473], '': 478 },
  /* 473 */ ['m',474,'{'],
  /* 474 */ { Id: [475,207], '': 476 },
  /* 475 */ {
    ';': ['c',474],
    '}': 476,
  },
  /* 476 */ ['m',477,'}'],
  /* 477 */ ['mk',478,'into'],
  /* 478 */ { all: ['ck',479], distinct: 'all', '': 479 },
  /* 479 */ { '{': [480,563], '': 480 },
  /* 480 */ { excluding: [486,556], '': 486 },
  /* 481 */ {
    '*': ['c',482],
    Id: [482,568], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', '@': 'Id', '{': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
  },
  /* 482 */ { ',': ['c',483], '': 484 },
  /* 483 */ {
    '*': ['c',482],
    Id: [482,568], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', '@': 'Id', '{': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
  },
  /* 484 */ ['mk',485,'from'],
  /* 485 */ [486,488],
  /* 486 */ { group: [0,602], where: 'group', having: 'group', '': 0 },
  'querySource',
  /* 488 */ [489,493],
  /* 489 */ { ',': 490, '': 0 },
  /* 490 */ { ',': ['c',491], '': 0 },
  /* 491 */ [490,493],
  'tableExpression',
  /* 493 */ {
    '(': [494,505],
    Id: [495,518],
  },
  /* 494 */ 495,
  /* 495 */ {
    cross: ['ck',496],
    inner: ['ck',499],
    full: ['ck',498], left: 'full', right: 'full',
    join: 500,
    '': 0
  },
  /* 496 */ ['mk',497,'join'],
  /* 497 */ {
    '(': [495,505],
    Id: [495,518],
  },
  /* 498 */ { outer: ['ck',499], '': 499 },
  /* 499 */ { one: [500,512], many: 'one', exact: 'one', '': 500 },
  /* 500 */ ['mk',501,'join'],
  /* 501 */ [502,493],
  /* 502 */ ['mk',503,'on'],
  /* 503 */ [495,634],
  'tableOrQueryParens',
  /* 505 */ ['m',506,'('],
  /* 506 */ {
    '(': [507,505],
    Id: [508,493],
    select: [508,459],
  },
  /* 507 */ {
    full: [508,494], join: 'full', left: 'full', cross: 'full', inner: 'full', right: 'full',
    limit: [508,462], minus: 'limit', order: 'limit', union: 'limit', except: 'limit', intersect: 'limit',
    '': 508
  },
  /* 508 */ ['m',509,')'],
  /* 509 */ {
    as: ['ck',510],
    Id: ['ci',0],
    '': 0
  },
  /* 510 */ ['mi',0],
  'joinCardinality',
  /* 512 */ {
    exact: ['ck',513],
    one: 513,
    many: ['ck',514],
  },
  /* 513 */ ['mk',514,'one'],
  /* 514 */ ['mk',515,'to'],
  /* 515 */ {
    exact: ['ck',516],
    one: 516,
    many: ['ck',0],
  },
  /* 516 */ ['mk',0,'one'],
  'fromRefWithOptAlias',
  /* 518 */ [519,524],
  /* 519 */ { ':': ['c',520], '': 521 },
  /* 520 */ [521,524],
  /* 521 */ {
    as: ['ck',522],
    Id: ['ci',0],
    '': 0
  },
  /* 522 */ ['mi',0],
  'fromPath',
  /* 524 */ ['mi',525],
  /* 525 */ { '(': [526,530], '[': '(', '': 526 },
  /* 526 */ { '.': ['c',527], '': 0 },
  /* 527 */ ['miA',528],
  /* 528 */ { '(': [526,530], '[': '(', '': 526 },
  'fromArgumentsAndFilter',
  /* 530 */ { '(': ['c',531], '': 535 },
  /* 531 */ { Id: 532 },
  /* 532 */ { Id: [533,537], '': 534 },
  /* 533 */ {
    ',': ['c',532],
    ')': 534,
  },
  /* 534 */ ['m',535,')'],
  /* 535 */ { '[': [0,541], '': 0 },
  'fromNamedArgument',
  /* 537 */ ['mi',538],
  /* 538 */ ['m',539,':'],
  /* 539 */ [0,642],
  'cardinalityAndFilter',
  /* 541 */ ['m',542,'['],
  /* 542 */ { Number: ['c',543], '': 544 },
  /* 543 */ ['m',544,':'],
  /* 544 */ [545,547],
  /* 545 */ ['m',0,']'],
  'filterClauses',
  /* 547 */ {
    where: ['ck',548],
    Id: 548, '#': 548, '(': 548, '+': 548, '-': 548, ':': 548, '?': 548, not: 548, case: 548, cast: 548, null: 548, true: 548, false: 548, Number: 548, String: 548, exists: 548, QuotedLiteral: 548,
    group: ['g',549,1], limit: 'group', order: 'group', having: 'group',
    '': 549
  },
  /* 548 */ [549,634],
  /* 549 */ { group: 550, '': 551 },
  /* 550 */ [551,608],
  /* 551 */ { having: ['ck',552], '': 553 },
  /* 552 */ [553,634],
  /* 553 */ { limit: 554, order: 554, '': 0 },
  /* 554 */ [0,614],
  'excludingClause',
  /* 556 */ ['mk',557,'excluding'],
  /* 557 */ ['m',558,'{'],
  /* 558 */ { Id: 559 },
  /* 559 */ { Id: ['ciA',560], '': 561 },
  /* 560 */ {
    ',': ['c',559],
    '}': 561,
  },
  /* 561 */ ['m',0,'}'],
  'selectItemsList',
  /* 563 */ ['m',564,'{'],
  /* 564 */ {
    '*': ['c',565],
    Id: [565,568], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', '@': 'Id', '{': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    '': 566
  },
  /* 565 */ {
    ',': ['c',564],
    '}': 566,
  },
  /* 566 */ ['m',0,'}'],
  'selectItemDef',
  /* 568 */ { '@': [568,772], '': 569 },
  /* 569 */ { virtual: ['ck',570,1], '': 570 },
  /* 570 */ { key: ['ck',571], '': 571 },
  /* 571 */ {
    Id: [572,642], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    '{': [579,563],
  },
  /* 572 */ {
    as: ['ck',573],
    Id: ['ci',574],
    '': 574
  },
  /* 573 */ ['mi',574],
  /* 574 */ {
    '{': 575,
    '.': ['c',577],
    '': 582
  },
  /* 575 */ [576,563],
  /* 576 */ { excluding: [582,556], '': 582 },
  /* 577 */ {
    '{': [578,563],
    '*': ['c',582],
  },
  /* 578 */ { excluding: [582,556], '': 582 },
  /* 579 */ { excluding: [580,556], '': 580 },
  /* 580 */ ['mk',581,'as'],
  /* 581 */ ['mi',582],
  /* 582 */ 583,
  /* 583 */ { '@': [583,775], '': 584 },
  /* 584 */ { ':': ['c',585], '': 0 },
  /* 585 */ {
    type: [599,399,1],
    localized: ['ck',586,1],
    Id: 586,
    redirected: ['ck',587,1],
    association: ['ck',591,1],
    composition: ['ck',593,1],
  },
  /* 586 */ [599,407],
  /* 587 */ ['mk',588,'to'],
  /* 588 */ [589,40],
  /* 589 */ {
    on: ['ck',590],
    '{': [599,197],
    '': 599
  },
  /* 590 */ [599,634],
  /* 591 */ { '[': [592,428], '': 592 },
  /* 592 */ ['mk',595,'to'],
  /* 593 */ { '[': [594,428], '': 594 },
  /* 594 */ ['mk',595,'of'],
  /* 595 */ { one: ['ck',596,1], many: 'one', '': 596 },
  /* 596 */ [597,40],
  /* 597 */ ['mk',598,'on'],
  /* 598 */ [599,634],
  /* 599 */ 600,
  /* 600 */ { '@': [600,769], '': 0 },
  'whereGroupByHaving',
  /* 602 */ { where: ['ck',603], '': 604 },
  /* 603 */ [604,634],
  /* 604 */ { group: [605,608], '': 605 },
  /* 605 */ { having: ['ck',606], '': 0 },
  /* 606 */ [0,634],
  'groupByClause',
  /* 608 */ ['mk',609,'group'],
  /* 609 */ ['mk',610,'by'],
  /* 610 */ [611,642],
  /* 611 */ { ',': ['c',612], '': 0 },
  /* 612 */ [611,642],
  'orderByLimitOffset',
  /* 614 */ { order: [615,620], '': 615 },
  /* 615 */ { limit: ['ck',616], '': 0 },
  /* 616 */ [617,642],
  /* 617 */ { offset: ['ck',618], '': 0 },
  /* 618 */ [0,642],
  'orderByClause',
  /* 620 */ ['mk',621,'order'],
  /* 621 */ ['mk',622,'by'],
  /* 622 */ [623,626],
  /* 623 */ { ',': ['c',624], '': 0 },
  /* 624 */ [623,626],
  'orderByExpression',
  /* 626 */ [627,642],
  /* 627 */ { asc: ['ck',628], desc: 'asc', '': 628 },
  /* 628 */ { nulls: ['ck',629], '': 0 },
  /* 629 */ { last: ['ck',0], first: 'last' },
  'conditionEOF',
  /* 631 */ [632,642],
  /* 632 */ ['m',0,'EOF'],
  'condition',
  /* 634 */ [0,642],
  'valuePath',
  /* 636 */ ['mi',637],
  /* 637 */ { '(': [638,703], '[': '(', '': 638 },
  /* 638 */ { '.': ['c',639], '': 0 },
  /* 639 */ ['miA',640],
  /* 640 */ { '(': [638,703], '[': '(', '': 638 },
  'expression',
  /* 642 */ {
    '(': [643,670],
    '#': [653,766], null: '#', true: '#', false: '#', Number: '#', String: '#', QuotedLiteral: '#',
    ':': ['c',644],
    '?': ['c',653],
    Id: [646,636],
    new: [653,682,1],
    exists: ['ck',649],
    case: [653,685],
    cast: [653,696],
    '+': ['c',652], '-': '+',
    not: ['ck',652],
  },
  /* 643 */ 653,
  /* 644 */ {
    Id: ['ciA',645],
    Number: ['c',653],
  },
  /* 645 */ { '.': [653,638], '': 653 },
  /* 646 */ { over: ['ck',647,1], '': 648 },
  /* 647 */ [648,730],
  /* 648 */ 653,
  /* 649 */ {
    '(': ['c',650],
    Id: [653,636],
    '?': ['c',653],
  },
  /* 650 */ [651,459],
  /* 651 */ ['m',653,')'],
  /* 652 */ [653,642],
  /* 653 */ {
    '*': ['c',657], '/': '*',
    '+': ['c',657], '-': '+',
    '||': ['c',657],
    and: ['ck',657,1],
    or: ['ck',657,1],
    '?': ['c',654],
    '<': ['c',656], '=': '<', '>': '<', '!=': '<', '<=': '<', '<>': '<', '>=': '<',
    is: ['ck',658,1],
    not: ['ck',660],
    in: ['g',660,1], like: 'in', between: 'in',
    '': 0
  },
  /* 654 */ [655,642],
  /* 655 */ ['m',657,':'],
  /* 656 */ { all: ['ck',657], any: 'all', some: 'all', '': 657 },
  /* 657 */ [668,642],
  /* 658 */ { not: ['ck',659], '': 659 },
  /* 659 */ ['mk',668,'null'],
  /* 660 */ {
    between: ['ck',661],
    in: ['ck',664],
    like: ['ck',665],
  },
  /* 661 */ [662,642],
  /* 662 */ ['mk',663,'and'],
  /* 663 */ [668,642],
  /* 664 */ [668,642],
  /* 665 */ [666,642],
  /* 666 */ { escape: ['ck',667,1], '': 668 },
  /* 667 */ [668,642],
  /* 668 */ 653,
  'expressionOrQueryParens',
  /* 670 */ ['m',671,'('],
  /* 671 */ {
    '(': [672,670],
    Id: [674,642], '#': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', not: 'Id', case: 'Id', cast: 'Id', null: 'Id', true: 'Id', false: 'Id', Number: 'Id', String: 'Id', exists: 'Id', QuotedLiteral: 'Id',
    select: [675,459],
  },
  /* 672 */ {
    '*': [673,643], '+': '*', '-': '*', '/': '*', '<': '*', '=': '*', '>': '*', '?': '*', '!=': '*', '<=': '*', '<>': '*', '>=': '*', in: '*', is: '*', or: '*', '||': '*', and: '*', not: '*', like: '*', between: '*',
    ',': [675,677],
    limit: [675,462], minus: 'limit', order: 'limit', union: 'limit', except: 'limit', intersect: 'limit',
    '': 675
  },
  /* 673 */ { ',': [675,677], '': 675 },
  /* 674 */ { ',': [675,677], '': 675 },
  /* 675 */ ['m',0,')'],
  'continueExpressionslist',
  /* 677 */ ['m',678,','],
  /* 678 */ { Id: 679, '#': 679, '(': 679, '+': 679, '-': 679, ':': 679, '?': 679, not: 679, case: 679, cast: 679, null: 679, true: 679, false: 679, Number: 679, String: 679, exists: 679, QuotedLiteral: 679 },
  /* 679 */ { Id: [680,642], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', not: 'Id', case: 'Id', cast: 'Id', null: 'Id', true: 'Id', false: 'Id', Number: 'Id', String: 'Id', exists: 'Id', QuotedLiteral: 'Id', '': 0 },
  /* 680 */ { ',': ['c',679], '': 0 },
  'newAndValuePath',
  /* 682 */ ['mk',683,'new'],
  /* 683 */ [0,636],
  'caseExpression',
  /* 685 */ ['mk',686,'case'],
  /* 686 */ {
    Id: [687,642], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', not: 'Id', case: 'Id', cast: 'Id', null: 'Id', true: 'Id', false: 'Id', Number: 'Id', String: 'Id', exists: 'Id', QuotedLiteral: 'Id',
    when: ['g',687,1],
    '': 687
  },
  /* 687 */ { when: 688 },
  /* 688 */ { when: ['ck',689], '': 692 },
  /* 689 */ [690,642],
  /* 690 */ ['mk',691,'then'],
  /* 691 */ [688,642],
  /* 692 */ { else: ['ck',693], '': 694 },
  /* 693 */ [694,642],
  /* 694 */ ['mk',0,'end'],
  'castFunction',
  /* 696 */ ['mk',697,'cast'],
  /* 697 */ ['m',698,'('],
  /* 698 */ [699,642],
  /* 699 */ ['mk',700,'as'],
  /* 700 */ [701,407],
  /* 701 */ ['m',0,')'],
  'argumentsAndFilter',
  /* 703 */ { '(': ['c',704], '': 723 },
  /* 704 */ { Id: ['ciA',711], '': 705 },
  /* 705 */ { Id: [706,725], '#': 'Id', '(': 'Id', '*': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', Id_all: 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id', '': 722 },
  /* 706 */ { ',': ['c',707], '': 708 },
  /* 707 */ {
    Id: [706,725], '#': 'Id', '(': 'Id', '*': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', not: 'Id', case: 'Id', cast: 'Id', null: 'Id', true: 'Id', false: 'Id', Id_all: 'Id', Number: 'Id', String: 'Id', exists: 'Id', QuotedLiteral: 'Id',
    ')': ['g',708,1], order: ')',
  },
  /* 708 */ { order: ['ck',709], '': 722 },
  /* 709 */ ['mk',710,'by'],
  /* 710 */ [722,745],
  /* 711 */ {
    ':': ['c',712],
    '=>': ['c',717],
  },
  /* 712 */ [713,642],
  /* 713 */ { ',': ['c',714], '': 722 },
  /* 714 */ {
    Id: ['ciA',715],
    ')': 722,
  },
  /* 715 */ ['m',716,':'],
  /* 716 */ [713,642],
  /* 717 */ [718,642],
  /* 718 */ { ',': ['c',719], '': 722 },
  /* 719 */ {
    Id: ['ciA',720],
    ')': 722,
  },
  /* 720 */ ['m',721,'=>'],
  /* 721 */ [718,642],
  /* 722 */ ['m',723,')'],
  /* 723 */ { '[': [0,541], '': 0 },
  'funcExpression',
  /* 725 */ {
    Id: [727,642], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    GenericExpr: ['ckA',727],
    GenericIntro: ['ckA',726],
  },
  /* 726 */ [727,642],
  /* 727 */ { GenericSeparator: ['ckA',728], '': 0 },
  /* 728 */ {
    Id: [727,642], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    GenericExpr: ['ckA',727],
  },
  'overClause',
  /* 730 */ ['m',731,'('],
  /* 731 */ { partition: ['ck',732], '': 734 },
  /* 732 */ ['mk',733,'by'],
  /* 733 */ [734,741],
  /* 734 */ { order: ['ck',735], '': 737 },
  /* 735 */ ['mk',736,'by'],
  /* 736 */ [737,745],
  /* 737 */ { rows: ['ck',738], '': 739 },
  /* 738 */ [739,754],
  /* 739 */ ['m',0,')'],
  'expressionsAsXpr',
  /* 741 */ [742,642],
  /* 742 */ { ',': ['c',743], '': 0 },
  /* 743 */ [742,642],
  'orderByClauseAsXpr',
  /* 745 */ [746,749],
  /* 746 */ { ',': ['c',747], '': 0 },
  /* 747 */ [746,749],
  'orderBySpecAsXpr',
  /* 749 */ [750,642],
  /* 750 */ { asc: ['ck',751], desc: 'asc', '': 751 },
  /* 751 */ { nulls: ['ck',752], '': 0 },
  /* 752 */ { last: ['ck',0], first: 'last' },
  'windowFrameClause',
  /* 754 */ {
    unbounded: ['ck',755],
    Number: ['c',755],
    current: ['ck',756],
    between: ['ck',757],
  },
  /* 755 */ ['mk',0,'preceding'],
  /* 756 */ ['mk',0,'row'],
  /* 757 */ [758,761],
  /* 758 */ ['mk',759,'and'],
  /* 759 */ [0,761],
  'windowFrameBoundSpec',
  /* 761 */ {
    unbounded: ['ck',762],
    Number: ['c',762],
    current: ['ck',764],
  },
  /* 762 */ {
    following: ['ck',763],
    preceding: ['ck',763],
  },
  /* 763 */ 0,
  /* 764 */ ['mk',0,'row'],
  'literalValue',
  /* 766 */ {
    '#': ['c',767],
    null: ['ck',0],
    true: ['ck',0], false: 'true',
    Number: ['c',0],
    String: ['c',0],
    QuotedLiteral: ['c',0],
  },
  /* 767 */ ['mi',0],
  'annoAssignStd',
  /* 769 */ ['m',770,'@'],
  /* 770 */ {
    '(': [0,778],
    Id: [0,783],
  },
  'annoAssignCol',
  /* 772 */ ['m',773,'@'],
  /* 773 */ {
    '(': [0,778],
    Id: [0,783],
  },
  'annoAssignMid',
  /* 775 */ ['m',776,'@'],
  /* 776 */ {
    '(': [0,778],
    Id: [0,787],
  },
  'annoAssignParen',
  /* 778 */ ['m',779,'('],
  /* 779 */ { Id: [780,783], '': 781 },
  /* 780 */ {
    ',': ['c',779],
    ')': 781,
  },
  /* 781 */ ['m',0,')'],
  'annoAssignBase',
  /* 783 */ [784,787],
  /* 784 */ { ':': ['c',785], '': 0 },
  /* 785 */ [0,809],
  'annoNamePath',
  /* 787 */ ['miA',788],
  /* 788 */ { '.': ['c',789], '': 791 },
  /* 789 */ {
    Id: ['ciA',788],
    '@': ['c',790],
  },
  /* 790 */ ['miA',788],
  /* 791 */ { '#': [0,800], '': 0 },
  'annoPath',
  /* 793 */ {
    Id: ['ciA',795],
    '@': ['c',794],
  },
  /* 794 */ ['miA',795],
  /* 795 */ { '.': ['c',796], '': 798 },
  /* 796 */ {
    Id: ['ciA',795],
    '@': ['c',797],
  },
  /* 797 */ ['miA',795],
  /* 798 */ { '#': [0,800], '': 0 },
  'annoPathVariant',
  /* 800 */ ['m',801,'#'],
  /* 801 */ ['miA',802],
  /* 802 */ { '.': ['c',803], '': 0 },
  /* 803 */ ['miA',802],
  'annoStructValue',
  /* 805 */ [806,793],
  /* 806 */ { ':': ['c',807], '': 0 },
  /* 807 */ [0,809],
  'annoValue',
  /* 809 */ {
    '#': [0,766], null: '#', true: '#', false: '#', Number: '#', String: '#', QuotedLiteral: '#',
    '+': ['c',810], '-': '+',
    Id: [0,793], '@': 'Id',
    '{': ['c',811],
    '[': ['c',814],
    '(': ['c',821],
  },
  /* 810 */ ['m',0,'Number'],
  /* 811 */ { Id: [812,805], '@': 'Id', '': 813 },
  /* 812 */ {
    ',': ['c',811],
    '}': 813,
  },
  /* 813 */ ['m',0,'}'],
  /* 814 */ {
    Id: [819,809], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', '@': 'Id', '[': 'Id', '{': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    '...': ['c',815],
    '': 820
  },
  /* 815 */ { up: ['ck',816], '': 818 },
  /* 816 */ ['mk',817,'to'],
  /* 817 */ [818,809],
  /* 818 */ 819,
  /* 819 */ {
    ',': ['c',814],
    ']': 820,
  },
  /* 820 */ ['m',0,']'],
  /* 821 */ [822,634],
  /* 822 */ ['m',0,')'],
];
class CdlParser extends AstBuildingParser {
  constructor(lexer,...args) { super(lexer,keywords,table,...args) }
  start($,$next) {
    $.source??=new XsnSource( 'cdl' );
    this.rule_(1,$next);
    for(;;) switch(this.s) {
      case 1: switch(this.lk()) {
        case 'namespace': this.gc(3,'fileSection') && this.namespaceDeclaration({source:$.source},2); continue;
        case 'using': this.usingDeclaration({source:$.source},2); continue;
        case '@': case 'type': case 'view': case 'event': case 'action': case 'aspect': case 'define': case 'entity': case 'extend': case 'context': case 'service': case 'abstract': case 'annotate': case 'function': case 'annotation': if(this.artifactDefOrExtend({outer:$.source},2)) {this.fileSection();} continue;
        default: this.s=3; continue;
      }
      case 2: switch(this.l()) {
        case ';': this.c(1); continue;
        case 'EOF': this.s=3; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(1); continue;
        default: this.e(); continue;
      }
      case 3: if(this.m(0,'EOF')) { this.docComment( null ); } continue;
      default: return this.exit_();
    }
  }
  artifactsBlock($,$next) {
    this.rule_(5,$next);
    for(;;) switch(this.s) {
      case 5: if(this.m(6,'{')) { $.art.artifacts = this.createDict( $.start ); $.art.extensions = []; } continue;
      case 6: switch(this.l()) {
        case 'Id': case '@': this.artifactDefOrExtend({outer:$.art},7); continue;
        default: this.s=8; continue;
      }
      case 7: switch(this.l()) {
        case ';': this.c(6); continue;
        case '}': this.s=8; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(6); continue;
        default: this.e(); continue;
      }
      case 8: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.art.artifacts ); } continue;
      default: return this.exit_();
    }
  }
  artifactDefOrExtend($,$next) {
    this.rule_(10,$next);
    let art=new XsnArtifact();
    { art.location = this.startLocation();
this.docComment( art ); }
    for(;;) switch(this.s) {
      case 10: switch(this.l()) {
        case '@': this.annoAssignStd({art},10); continue;
        default: this.s=11; continue;
      }
      case 11: switch(this.lk()) {
        case 'define': this.ck(12); continue;
        case 'type': case 'view': case 'event': case 'action': case 'aspect': case 'entity': case 'context': case 'service': case 'abstract': case 'function': case 'annotation': this.s=12; continue;
        case 'extend': if(this.ck(13)) { art.kind = 'extend'; } continue;
        case 'annotate': this.ck(14); continue;
        default: this.e(); continue;
      }
      case 12: switch(this.lk()) {
        case 'service': this.serviceDef({art,outer:$.outer},0); continue;
        case 'context': this.contextDef({art,outer:$.outer},0); continue;
        case 'annotation': this.annotationDef({art,outer:$.outer},0); continue;
        case 'type': this.typeDef({art,outer:$.outer},0); continue;
        case 'aspect': case 'abstract': this.aspectDef({art,outer:$.outer},0); continue;
        case 'entity': this.entityDef({art,outer:$.outer},0); continue;
        case 'view': this.viewDef({art,outer:$.outer},0); continue;
        case 'event': this.eventDef({art,outer:$.outer},0); continue;
        case 'action': this.actionMainDef({art,outer:$.outer},0); continue;
        case 'function': this.functionMainDef({art,outer:$.outer},0); continue;
        default: this.e(); continue;
      }
      case 13: switch(this.lk()) {
        case 'Id': this.extendArtifact({art,outer:$.outer},0); continue;
        case 'service': this.lP() && this.extendService({art,outer:$.outer},0); continue;
        case 'context': this.lP() && this.extendContext({art,outer:$.outer},0); continue;
        case 'type': this.lP() && this.extendType({art,outer:$.outer},0); continue;
        case 'aspect': case 'entity': this.lP() && this.extendEntityOrAspect({art,outer:$.outer},0); continue;
        case 'projection': this.lP() && this.extendProjection({art,outer:$.outer},0); continue;
        default: this.ei(); continue;
      }
      case 14: this.annotateArtifact({art,outer:$.outer},0); continue;
      default: return this.exit_();
    }
  }
  namespaceDeclaration($,$next) {
    this.rule_(16,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 16: this.mk(17,'namespace'); continue;
      case 17: if(this.namePath(_={category:'Namespace'},0)) {name=_.name; $.source.namespace ??= { kind: 'namespace', name: name }; } continue;
      default:
      this.attachLocation( $.source.namespace );
      return this.exit_();
    }
  }
  usingDeclaration($,$next) {
    this.rule_(19,$next);
    let decl={ kind: 'using' };
    for(;;) switch(this.s) {
      case 19: this.mk(20,'using'); continue;
      case 20: switch(this.lk()) {
        case 'from': this.ck(21); continue;
        case 'Id': this.usingProxy({outer:$.source,proxy:decl},22); continue;
        case '{': this.s=24;{ $.source.usings.push( decl ); } continue;
        default: this.ei(); continue;
      }
      case 21: if(this.m(0,'String')) { $.source.dependencies.push( this.quotedLiteral() ); } continue;
      case 22: switch(this.lk()) {
        case 'from': this.ck(23); continue;
        default: this.gr([';']); continue;
      }
      case 23: if(this.m(0,'String')) { $.source.dependencies.push( decl.fileDep = this.quotedLiteral() ); } continue;
      case 24: if(this.m(25,'{')) { decl.usings = this.createArray(); } continue;
      case 25: switch(this.lk()) {
        case 'Id': this.s=26; continue;
        default: this.ei(); continue;
      }
      case 26: switch(this.l()) {
        case 'Id': this.usingProxy({outer:decl,proxy:{ kind: 'using' }},27); continue;
        default: this.s=28; continue;
      }
      case 27: switch(this.l()) {
        case ',': this.c(26); continue;
        case '}': this.s=28; continue;
        default: this.e(); continue;
      }
      case 28: if(this.m(29,'}')) {this.afterBrace(); this.finalizeDictOrArray( decl.usings ); } continue;
      case 29: switch(this.lk()) {
        case 'from': this.ck(30); continue;
        default: this.gr([';']); continue;
      }
      case 30: if(this.m(0,'String')) { $.source.dependencies.push( decl.fileDep = this.quotedLiteral() ); } continue;
      default:
      this.attachLocation( decl );
      return this.exit_();
    }
  }
  usingProxy($,$next) {
    this.rule_(32,$next);
    let extern; let _;
    for(;;) switch(this.s) {
      case 32: if(this.simplePath(_={category:'global'},33)) {extern=_.ref; $.proxy.extern = extern; $.outer.usings.push( $.proxy ); } continue;
      case 33: switch(this.lk()) {
        case 'as': this.ck(34); continue;
        default: if(this.gr([])) { this.classifyImplicitName( 'Using' ); } continue;
      }
      case 34: if(this.mi(0,'UsingAlias')) { $.proxy.name = this.identAst(); } continue;
      default:
      this.attachLocation( $.proxy );
      return this.exit_();
    }
  }
  namePath($,$next) {
    $.name??=new XsnName();
    this.rule_(36,$next);
    for(;;) switch(this.s) {
      case 36: if(this.mi(37,$.category)) { $.name.path = [ this.identAst() ]; } continue;
      case 37: switch(this.l()) {
        case '.': this.c(38); continue;
        default: this.gr(['@']); continue;
      }
      case 38: if(this.miA(37,$.category)) { $.name.path.push( this.identAst() ); } continue;
      default:
      this.attachLocation( $.name );
      return this.exit_();
    }
  }
  simplePath($,$next) {
    $.ref??={};
    this.rule_(40,$next);
    for(;;) switch(this.s) {
      case 40: if(this.mi(41,$.category)) { $.ref.path = [ this.identAst() ]; } continue;
      case 41: switch(this.l()) {
        case '.': this.c(42); continue;
        default: this.gr([]); continue;
      }
      case 42: if(this.miA(41,$.category)) { $.ref.path.push( this.identAst() ); } continue;
      default:
      this.attachLocation( $.ref );
      return this.exit_();
    }
  }
  serviceDef($,$next) {
    this.rule_(44,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 44: this.mk(45,'service'); continue;
      case 45: if(this.namePath(_={category:'Service'},46)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'service', name );
this.docComment( $.art ); } continue;
      case 46: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},46); continue;
        default: this.s=47; continue;
      }
      case 47: switch(this.l()) {
        case '{': this.artifactsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  contextDef($,$next) {
    this.rule_(49,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 49: this.mk(50,'context'); continue;
      case 50: if(this.namePath(_={category:'Context'},51)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'context', name );
this.docComment( $.art ); } continue;
      case 51: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},51); continue;
        default: this.s=52; continue;
      }
      case 52: switch(this.l()) {
        case '{': this.artifactsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  annotationDef($,$next) {
    this.rule_(54,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 54: this.mk(55,'annotation'); continue;
      case 55: if(this.namePath(_={category:'AnnoDef'},56)) {name=_.name; this.addDef( $.art, $.outer, 'vocabularies', 'annotation', name );
this.docComment( $.art ); } continue;
      case 56: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},56); continue;
        default: this.s=57; continue;
      }
      case 57: this.typeOrIncludesSpec({art:$.art},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  typeDef($,$next) {
    this.rule_(59,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 59: this.mk(60,'type'); continue;
      case 60: if(this.namePath(_={category:'Type'},61)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'type', name );
this.docComment( $.art ); } continue;
      case 61: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},61); continue;
        default: this.s=62; continue;
      }
      case 62: this.typeOrIncludesSpec({art:$.art},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  aspectDef($,$next) {
    this.rule_(64,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 64: switch(this.lk()) {
        case 'aspect': this.ck(66); continue;
        case 'abstract': if(this.ck(65)) { this.warning( 'syntax-deprecated-abstract', this.lb().location ); } continue;
        default: this.e(); continue;
      }
      case 65: this.mk(66,'entity'); continue;
      case 66: if(this.namePath(_={category:'Type'},67)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'aspect', name );
this.docComment( $.art ); } continue;
      case 67: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},67); continue;
        default: this.s=68; continue;
      }
      case 68: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},69); continue;
        case ':': this.c(70); continue;
        default: this.gr([';']); continue;
      }
      case 69: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 70: this.aspectColonSpec({art:$.art},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  aspectColonSpec($,$next) {
    this.rule_(72,$next);
    let incl; let _;
    for(;;) switch(this.s) {
      case 72: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},73)) {incl=_.ref; $.art.includes ??= []; $.art.includes.push( incl ); } continue;
        default: this.s=74; continue;
      }
      case 73: switch(this.l()) {
        case ',': this.c(72); continue;
        default: this.s=74; continue;
      }
      case 74: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},75); continue;
        default: this.gr([';']); continue;
      }
      case 75: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default: return this.exit_();
    }
  }
  entityDef($,$next) {
    this.rule_(77,$next);
    let name; let incl; let query; let _;
    for(;;) switch(this.s) {
      case 77: this.mk(78,'entity'); continue;
      case 78: if(this.namePath(_={category:'Entity'},79)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'entity', name );
this.docComment( $.art ); } continue;
      case 79: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},79); continue;
        default: this.s=80; continue;
      }
      case 80: switch(this.l()) {
        case '(': this.paramsList({art:$.art},81); continue;
        default: this.s=81; continue;
      }
      case 81: switch(this.lk()) {
        case ':': if(this.c(82)) { $.art.includes ??= []; } continue;
        case '{': this.s=85; continue;
        case 'as': this.ck(86); continue;
        default: this.e(); continue;
      }
      case 82: switch(this.lk()) {
        case 'Id': this.s=83; continue;
        default: this.ei(); continue;
      }
      case 83: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},84)) {incl=_.ref; $.art.includes.push( incl ); } continue;
        default: this.s=85; continue;
      }
      case 84: switch(this.l()) {
        case ',': this.c(83); continue;
        case '{': this.s=85; continue;
        default: this.e(); continue;
      }
      case 85: this.elementsBlock({art:$.art},89); continue;
      case 86: switch(this.lk()) {
        case '(': case 'select': if(this.queryExpression(_={},89)) {query=_.expr; $.art.query = query; $.art.$syntax = 'entity'; } continue;
        case 'projection': if(this.projectionSpec(_={},87)) {query=_.query; $.art.query = query; $.art.$syntax = 'projection'; } continue;
        default: this.e(); continue;
      }
      case 87: switch(this.lk()) {
        case 'group': case 'where': case 'having': this.whereGroupByHaving({query},88); continue;
        default: this.s=88; continue;
      }
      case 88: switch(this.lk()) {
        case 'limit': case 'order': this.orderByLimitOffset({query},89); continue;
        default: this.s=89; continue;
      }
      case 89: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  viewDef($,$next) {
    this.rule_(91,$next);
    let name; let query; let _;
    for(;;) switch(this.s) {
      case 91: this.mk(92,'view'); continue;
      case 92: if(this.namePath(_={category:'Entity'},93)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'entity', name );
this.docComment( $.art ); } continue;
      case 93: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},93); continue;
        default: this.s=94; continue;
      }
      case 94: switch(this.lk()) {
        case '(': this.paramsList({art:$.art},100); continue;
        case 'with': this.ck(95); continue;
        default: this.s=100; continue;
      }
      case 95: if(this.mk(96,'parameters')) { $.art.params = this.createDict(); } continue;
      case 96: this.paramDef({outer:$.art},97); continue;
      case 97: switch(this.l()) {
        case ',': this.c(98); continue;
        default: this.s=99; continue;
      }
      case 98: this.paramDef({outer:$.art},97); continue;
      case 99: this.s=100;{ this.finalizeDictOrArray( $.art.params ); } continue;
      case 100: this.mk(101,'as'); continue;
      case 101: if(this.queryExpression(_={},0)) {query=_.expr; $.art.query = query; $.art.$syntax = 'view'; } continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  eventDef($,$next) {
    this.rule_(103,$next);
    let name; let incl; let query; let _;
    for(;;) switch(this.s) {
      case 103: this.mk(104,'event'); continue;
      case 104: if(this.namePath(_={category:'Event'},105)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'event', name );
this.docComment( $.art ); } continue;
      case 105: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},105); continue;
        default: this.s=106; continue;
      }
      case 106: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},0); continue;
        case ':': this.c(107); continue;
        default: this.e(); continue;
      }
      case 107: switch(this.lk()) {
        case '{': this.elementsBlock({art:$.art},0); continue;
        case 'Id': if(this.simplePath(_={category:'artref'},108)) {incl=_.ref; $.art.type = incl; } continue;
        case 'projection': if(this.lP() && this.projectionSpec(_={},0)) {query=_.query; $.art.query = query; $.art.$syntax = 'projection'; } continue;
        default: this.ei(); continue;
      }
      case 108: switch(this.l()) {
        case ',': case '{': this.s=109;{ $.art.includes = [ $.art.type ]; delete $.art.type; } continue;
        default: this.s=113;{ this.docComment( $.art ); } continue;
      }
      case 109: switch(this.l()) {
        case ',': this.c(110); continue;
        default: this.s=112; continue;
      }
      case 110: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},111)) {incl=_.ref; $.art.includes.push( incl ); } continue;
        default: this.s=112; continue;
      }
      case 111: switch(this.l()) {
        case ',': this.c(110); continue;
        case '{': this.s=112; continue;
        default: this.e(); continue;
      }
      case 112: this.elementsBlock({art:$.art},0); continue;
      case 113: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},113); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  actionMainDef($,$next) {
    this.rule_(115,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 115: this.mk(116,'action'); continue;
      case 116: if(this.namePath(_={category:'Action'},117)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'action', name );
this.docComment( $.art ); } continue;
      case 117: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},117); continue;
        default: this.s=118; continue;
      }
      case 118: this.paramsList({art:$.art},119); continue;
      case 119: switch(this.lk()) {
        case 'returns': this.returnsSpec({outer:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  functionMainDef($,$next) {
    this.rule_(121,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 121: this.mk(122,'function'); continue;
      case 122: if(this.namePath(_={category:'Action'},123)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'function', name );
this.docComment( $.art ); } continue;
      case 123: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},123); continue;
        default: this.s=124; continue;
      }
      case 124: this.paramsList({art:$.art},125); continue;
      case 125: this.returnsSpec({outer:$.art},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  actionsBlock($,$next) {
    this.rule_(127,$next);
    for(;;) switch(this.s) {
      case 127: if(this.mk(128,'actions')) { $.art.actions = this.createDict(); } continue;
      case 128: this.m(129,'{'); continue;
      case 129: switch(this.l()) {
        case 'Id': case '@': this.boundActionFunctionDef({outer:$.art},130); continue;
        default: this.s=131; continue;
      }
      case 130: switch(this.l()) {
        case ';': this.c(129); continue;
        case '}': this.s=131; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(129); continue;
        default: this.e(); continue;
      }
      case 131: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.art.actions ); } continue;
      default: return this.exit_();
    }
  }
  boundActionFunctionDef($,$next) {
    this.rule_(133,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 133: switch(this.l()) {
        case '@': this.annoAssignStd({art},133); continue;
        default: this.s=134; continue;
      }
      case 134: switch(this.lk()) {
        case 'action': this.ck(135); continue;
        case 'function': this.ck(139); continue;
        default: this.e(); continue;
      }
      case 135: if(this.mi(136,'BoundAction')) { this.addDef( art, $.outer, 'actions', 'action', this.identAst() );
this.docComment( art ); } continue;
      case 136: switch(this.l()) {
        case '@': this.annoAssignMid({art},136); continue;
        default: this.s=137; continue;
      }
      case 137: this.paramsList({art},138); continue;
      case 138: switch(this.lk()) {
        case 'returns': this.returnsSpec({outer:art},0); continue;
        default: this.gr([';','@','}','action','function']); continue;
      }
      case 139: if(this.mi(140,'BoundAction')) { this.addDef( art, $.outer, 'actions', 'function', this.identAst() );
this.docComment( art ); } continue;
      case 140: switch(this.l()) {
        case '@': this.annoAssignMid({art},140); continue;
        default: this.s=141; continue;
      }
      case 141: this.paramsList({art},142); continue;
      case 142: this.returnsSpec({outer:art},0); continue;
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  paramsList($,$next) {
    this.rule_(144,$next);
    for(;;) switch(this.s) {
      case 144: if(this.m(145,'(')) { $.art.params = this.createDict(); } continue;
      case 145: switch(this.l()) {
        case 'Id': case '@': this.paramDef({outer:$.art},146); continue;
        default: this.s=147; continue;
      }
      case 146: switch(this.l()) {
        case ',': this.c(145); continue;
        case ')': this.s=147; continue;
        default: this.e(); continue;
      }
      case 147: if(this.m(0,')')) { this.finalizeDictOrArray( $.art.params ); } continue;
      default: return this.exit_();
    }
  }
  paramDef($,$next) {
    this.rule_(149,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 149: switch(this.l()) {
        case '@': this.annoAssignStd({art},149); continue;
        default: this.s=150; continue;
      }
      case 150: if(this.miA(151,'Param')) { this.addDef( art, $.outer, 'params', 'param', this.identAst() );
this.docComment( art ); } continue;
      case 151: switch(this.l()) {
        case '@': this.annoAssignMid({art},151); continue;
        default: this.s=152; continue;
      }
      case 152: switch(this.l()) {
        case '{': this.elementsBlock({art},153); continue;
        case ':': this.c(154); continue;
        default: this.e(); continue;
      }
      case 153: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art},0); continue;
        default: this.gr([',']); continue;
      }
      case 154: if(this.typeExpression({art},155)) { this.docComment( art ); } continue;
      case 155: switch(this.l()) {
        case '@': this.annoAssignStd({art},155); continue;
        default: this.gr([',']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  returnsSpec($,$next) {
    this.rule_(157,$next);
    let art=new XsnArtifact();
    for(;;) switch(this.s) {
      case 157: if(this.mk(158,'returns')) { art.kind = 'param'; $.outer.returns = art;
this.docComment( art ); } continue;
      case 158: switch(this.l()) {
        case '@': this.annoAssignStd({art},158); continue;
        default: this.s=159; continue;
      }
      case 159: this.typeExpression({art},0); continue;
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  elementsBlock($,$next) {
    this.rule_(161,$next);
    for(;;) switch(this.s) {
      case 161: if(this.m(162,'{')) { $.art.elements = this.createDict(); } continue;
      case 162: switch(this.l()) {
        case 'Id': case '@': this.elementDef({outer:$.art,art:undefined},163); continue;
        default: this.s=164; continue;
      }
      case 163: switch(this.l()) {
        case ';': this.c(162); continue;
        case '}': this.s=164; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(162); continue;
        default: this.e(); continue;
      }
      case 164: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.art.elements ); } continue;
      default: return this.exit_();
    }
  }
  elementDef($,$next) {
    this.rule_(166,$next);
    let expr; let _;
    { $.art ??= new XsnArtifact();
this.docComment( $.art ); }
    for(;;) switch(this.s) {
      case 166: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},166); continue;
        default: this.s=167; continue;
      }
      case 167: switch(this.lk()) {
        case 'virtual': if(this.ckP(168,['Id','key'])) { $.art.virtual = this.valueWithLocation( true ); } continue;
        default: this.s=168; continue;
      }
      case 168: switch(this.lk()) {
        case 'key': if(this.ck(169)) { $.art.key = this.valueWithLocation( true ); } continue;
        default: this.s=169; continue;
      }
      case 169: switch(this.lk()) {
        case 'masked': if(this.ckP(170,['Id'])) { $.art.masked = this.valueWithLocation( true );
this.message( 'syntax-unsupported-masked', this.lb(), { keyword: 'masked' } ); } continue;
        default: this.s=170; continue;
      }
      case 170: switch(this.lk()) {
        case 'element': if(this.ckP(171,['Id'])) { $.art.$syntax = 'element'; } continue;
        default: this.s=171; continue;
      }
      case 171: if(this.mi(172,'Element')) { this.addDef( $.art, $.outer, 'elements', 'element', this.identAst() );
this.docComment( $.art ); } continue;
      case 172: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},172); continue;
        default: this.s=173; continue;
      }
      case 173: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},174); continue;
        case ':': this.c(175); continue;
        default: this.s=176; continue;
      }
      case 174: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},176); continue;
        default: this.s=176; continue;
      }
      case 175: this.typeExpression({art:$.art},176); continue;
      case 176: switch(this.l()) {
        case '=': this.c(177); continue;
        default: this.s=179; continue;
      }
      case 177: if(this.expression(_={},178)) {expr=_.expr; $.art.value = expr; } continue;
      case 178: switch(this.lk()) {
        case 'stored': if(this.ck(179)) { $.art.value.stored = this.valueWithLocation( true ); } continue;
        default: this.s=179; continue;
      }
      case 179: this.s=180;{ this.docComment( $.art ); } continue;
      case 180: switch(this.l()) {
        case '@': this.gc(0,'allowFinalAnnoAssign') && this.annoAssignStd({art:$.art},180); continue;
        default: this.gr(['Id',';','@','}','key']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  enumSymbolsBlock($,$next) {
    this.rule_(182,$next);
    for(;;) switch(this.s) {
      case 182: if(this.mk(183,'enum')) { $.art.enum = this.createDict(); } continue;
      case 183: this.m(184,'{'); continue;
      case 184: switch(this.l()) {
        case 'Id': case '@': this.enumSymbolDef({outer:$.art},185); continue;
        default: this.s=186; continue;
      }
      case 185: switch(this.l()) {
        case ';': this.c(184); continue;
        case '}': this.s=186; continue;
        default: this.e(); continue;
      }
      case 186: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.art.enum ); } continue;
      default: return this.exit_();
    }
  }
  enumSymbolDef($,$next) {
    this.rule_(188,$next);
    let art=new XsnArtifact();
    let sign; let value; let _;
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 188: switch(this.l()) {
        case '@': this.annoAssignStd({art},188); continue;
        default: this.s=189; continue;
      }
      case 189: if(this.mi(190,'Enum')) { this.addDef( art, $.outer, 'enum', 'enum', this.identAst() );
this.docComment( art ); } continue;
      case 190: switch(this.l()) {
        case '@': this.annoAssignStd({art},190); continue;
        default: this.s=191; continue;
      }
      case 191: switch(this.l()) {
        case '=': this.c(192); continue;
        default: this.gr([';','}']); continue;
      }
      case 192: switch(this.l()) {
        case 'String': if(this.c(194)) { art.value = this.quotedLiteral(); } continue;
        case 'Number': if(this.c(194)) { art.value = this.numberLiteral(); } continue;
        case '+': case '-': if(this.c(193)) sign=this.lb(); continue;
        case 'Id': case '#': case 'QuotedLiteral': if(this.literalValue(_={},194)) {value=_.expr; art.value = value; } continue;
        default: this.e(); continue;
      }
      case 193: if(this.m(194,'Number')) { art.value = this.numberLiteral( sign ); } continue;
      case 194: this.s=195;{ this.docComment( art ); } continue;
      case 195: switch(this.l()) {
        case '@': this.annoAssignStd({art},195); continue;
        default: this.gr([';','}']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  foreignKeysBlock($,$next) {
    this.rule_(197,$next);
    for(;;) switch(this.s) {
      case 197: if(this.m(198,'{')) { $.art.foreignKeys = this.createDict(); } continue;
      case 198: switch(this.l()) {
        case 'Id': case '@': this.foreignKeyDef({outer:$.art},199); continue;
        default: this.s=200; continue;
      }
      case 199: switch(this.l()) {
        case ',': this.c(198); continue;
        case '}': this.s=200; continue;
        default: this.e(); continue;
      }
      case 200: if(this.m(0,'}')) { this.finalizeDictOrArray( $.art.foreignKeys ); } continue;
      default: return this.exit_();
    }
  }
  foreignKeyDef($,$next) {
    this.rule_(202,$next);
    let art=new XsnArtifact(); let name;
    let ref; let _;
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 202: switch(this.l()) {
        case '@': this.annoAssignStd({art},202); continue;
        default: this.s=203; continue;
      }
      case 203: if(this.simplePath(_={category:'ref'},204)) {ref=_.ref; art.targetElement = ref; } continue;
      case 204: switch(this.lk()) {
        case 'as': this.ck(205); continue;
        default: if(this.gr([',','}'])) { this.classifyImplicitName( 'KeyImplicit', ref ); name = ref.path; } continue;
      }
      case 205: if(this.mi(0,'Key')) {name=this.lb(); name = this.identAst(); } continue;
      case 0: { this.addDef( art, $.outer, 'foreignKeys', 'key', name ); }
      default:
      this.attachLocation(art);
      return this.exit_();
    }
  }
  mixinElementDef($,$next) {
    this.rule_(207,$next);
    let art=new XsnArtifact();
    let assoc; let card; let target; let expr; let _;
    for(;;) switch(this.s) {
      case 207: if(this.mi(208,'Mixin')) { this.addDef( art, $.outer, 'mixin', 'mixin', this.identAst() ); } continue;
      case 208: this.m(209,':'); continue;
      case 209: switch(this.lk()) {
        case 'association': if(this.ck(210)) assoc=this.lb(); continue;
        case 'composition': if(this.ck(212)) assoc=this.lb(); continue;
        default: this.e(); continue;
      }
      case 210: switch(this.l()) {
        case '[': this.cardinality({art},211); continue;
        default: this.s=211; continue;
      }
      case 211: this.mk(214,'to'); continue;
      case 212: switch(this.l()) {
        case '[': this.cardinality({art},213); continue;
        default: this.s=213; continue;
      }
      case 213: this.mk(214,'of'); continue;
      case 214: switch(this.lk()) {
        case 'one': case 'many': if(this.ckP(215,['Id'])) card=this.lb(); continue;
        default: this.s=215; continue;
      }
      case 215: if(this.simplePath(_={category:'artref'},216)) {target=_.ref; this.setAssocAndComposition( art, assoc, card, target ); } continue;
      case 216: this.mk(217,'on'); continue;
      case 217: if(this.condition(_={},0)) {expr=_.expr; art.on = expr; } continue;
      default:
      this.attachLocation(art);
      return this.exit_();
    }
  }
  annotateArtifact($,$next) {
    this.rule_(219,$next);
    let name; let elemName; let _;
    for(;;) switch(this.s) {
      case 219: if(this.namePath(_={category:'Ext'},220)) name=_.name; continue;
      case 220: switch(this.lk()) {
        case ':': this.c(221); continue;
        case 'with': this.ck(226); continue;
        default: this.s=226; continue;
      }
      case 221: if(this.namePath(_={category:'ExtElement'},222)) {elemName=_.name; this.addExtension( $.art, $.outer, 'annotate', name, elemName.path ); } continue;
      case 222: switch(this.lk()) {
        case 'with': this.ck(223); continue;
        default: this.s=223; continue;
      }
      case 223: this.s=224;{ this.docComment( $.art ); } continue;
      case 224: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},224); continue;
        default: this.s=225; continue;
      }
      case 225: switch(this.l()) {
        case '{': this.annotateElementsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 226: this.s=227;{ this.addExtension( $.art, $.outer, 'annotate', name );
this.docComment( $.art ); } continue;
      case 227: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},227); continue;
        default: this.s=228; continue;
      }
      case 228: switch(this.l()) {
        case '(': this.annotateParamsBlock({art:$.art},229); continue;
        default: this.s=229; continue;
      }
      case 229: switch(this.lk()) {
        case 'returns': this.annotateReturns({outer:$.art},0); continue;
        case '{': this.annotateElementsBlock({art:$.art},230); continue;
        default: this.s=230; continue;
      }
      case 230: switch(this.lk()) {
        case 'actions': this.annotateActionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendArtifact($,$next) {
    this.rule_(232,$next);
    let name; let elemName; let elements; let incl; let _;
    for(;;) switch(this.s) {
      case 232: if(this.namePath(_={category:'Ext'},233)) name=_.name; continue;
      case 233: switch(this.lk()) {
        case ':': this.c(234); continue;
        case 'with': if(this.ck(243)) { this.addExtension( $.art, $.outer, 'extend', name );
this.docComment( $.art ); } continue;
        default: this.s=240;{ this.addExtension( $.art, $.outer, 'extend', name );
this.docComment( $.art ); } continue;
      }
      case 234: if(this.namePath(_={category:'ExtElement'},235)) {elemName=_.name; this.addExtension( $.art, $.outer, 'extend', name, elemName.path ); } continue;
      case 235: switch(this.lk()) {
        case 'with': this.ck(236); continue;
        default: this.s=236; continue;
      }
      case 236: this.s=237;{ this.docComment( $.art ); } continue;
      case 237: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},237); continue;
        default: this.s=238; continue;
      }
      case 238: switch(this.lk()) {
        case 'elements': if(this.ck(239)) elements=this.lb(); continue;
        case '{': this.s=239; continue;
        case 'enum': this.enumSymbolsBlock({art:$.art},0); continue;
        case '(': this.typeNamedArgsList({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 239: this.extendElementsBlock({art:$.art,start:elements},0); continue;
      case 240: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},240); continue;
        default: this.s=241; continue;
      }
      case 241: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},242); continue;
        default: this.gr([';']); continue;
      }
      case 242: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 243: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},243); continue;
        default: this.s=244; continue;
      }
      case 244: switch(this.lk()) {
        case 'Id': if(this.simplePath(_={category:'artref'},245)) {incl=_.ref; $.art.includes = [ incl ]; } continue;
        case 'elements': if(this.ckP(249,['{'])) elements=this.lb(); continue;
        case '{': this.s=249; continue;
        case 'actions': this.lP() && this.actionsBlock({art:$.art},0); continue;
        case 'enum': this.lP() && this.enumSymbolsBlock({art:$.art},0); continue;
        case '(': this.typeNamedArgsList({art:$.art},0); continue;
        case 'columns': this.ckP(251,['{']); continue;
        case 'definitions': this.ckP(252,['{']); continue;
        default: this.gi(0,[';']); continue;
      }
      case 245: switch(this.l()) {
        case ',': this.c(246); continue;
        default: this.s=247; continue;
      }
      case 246: if(this.simplePath(_={category:'artref'},245)) {incl=_.ref; $.art.includes.push( incl ); } continue;
      case 247: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},248); continue;
        default: this.s=248; continue;
      }
      case 248: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 249: this.extendElementsBlock({art:$.art,start:elements},250); continue;
      case 250: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 251: this.selectItemsList({query:$.art,clause:'columns',start:this.lb()},0); continue;
      case 252: this.artifactsBlock({art:$.art,start:this.lb()},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendService($,$next) {
    this.rule_(254,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 254: if(this.mk(255,'service')) { $.art.expectedKind = this.valueWithLocation(); } continue;
      case 255: if(this.namePath(_={category:'ExtService'},256)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 256: switch(this.lk()) {
        case 'with': this.ck(257); continue;
        default: this.s=257; continue;
      }
      case 257: this.s=258;{ this.docComment( $.art ); } continue;
      case 258: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},258); continue;
        default: this.s=259; continue;
      }
      case 259: switch(this.l()) {
        case '{': this.artifactsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendContext($,$next) {
    this.rule_(261,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 261: if(this.mk(262,'context')) { $.art.expectedKind = this.valueWithLocation(); } continue;
      case 262: if(this.namePath(_={category:'ExtContext'},263)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 263: switch(this.lk()) {
        case 'with': this.ck(264); continue;
        default: this.s=264; continue;
      }
      case 264: this.s=265;{ this.docComment( $.art ); } continue;
      case 265: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},265); continue;
        default: this.s=266; continue;
      }
      case 266: switch(this.l()) {
        case '{': this.artifactsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendType($,$next) {
    this.rule_(268,$next);
    let name; let incl; let elements; let _;
    for(;;) switch(this.s) {
      case 268: if(this.mk(269,'type')) { $.art.expectedKind = this.valueWithLocation(); } continue;
      case 269: if(this.namePath(_={category:'Ext'},270)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 270: switch(this.lk()) {
        case 'with': if(this.ck(273)) { this.docComment( $.art ); } continue;
        default: this.s=271;{ this.docComment( $.art ); } continue;
      }
      case 271: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},271); continue;
        default: this.s=272; continue;
      }
      case 272: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      case 273: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},273); continue;
        default: this.s=274; continue;
      }
      case 274: switch(this.lk()) {
        case 'Id': if(this.simplePath(_={category:'artref'},275)) {incl=_.ref; $.art.includes = [ incl ]; } continue;
        case 'elements': if(this.ckP(278,['{'])) elements=this.lb(); continue;
        case '{': this.s=278; continue;
        case 'enum': this.lP() && this.enumSymbolsBlock({art:$.art},0); continue;
        case '(': this.typeNamedArgsList({art:$.art},0); continue;
        default: this.gi(0,[';']); continue;
      }
      case 275: switch(this.l()) {
        case ',': this.c(276); continue;
        default: this.s=277; continue;
      }
      case 276: if(this.simplePath(_={category:'artref'},275)) {incl=_.ref; $.art.includes.push( incl ); } continue;
      case 277: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      case 278: this.extendElementsBlock({art:$.art,start:elements},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendEntityOrAspect($,$next) {
    this.rule_(280,$next);
    let name; let incl; let _;
    for(;;) switch(this.s) {
      case 280: switch(this.lk()) {
        case 'aspect': case 'entity': if(this.ck(281)) { $.art.expectedKind = this.valueWithLocation(); } continue;
        default: this.e(); continue;
      }
      case 281: if(this.namePath(_={category:'Ext'},282)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 282: switch(this.lk()) {
        case 'with': if(this.ck(284)) { this.docComment( $.art ); } continue;
        default: this.s=283;{ this.docComment( $.art ); } continue;
      }
      case 283: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},283); continue;
        default: this.s=288; continue;
      }
      case 284: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},284); continue;
        default: this.s=285; continue;
      }
      case 285: switch(this.lk()) {
        case 'Id': if(this.simplePath(_={category:'artref'},286)) {incl=_.ref; $.art.includes = [ incl ]; } continue;
        case 'actions': this.gP(288); continue;
        default: this.gi(288); continue;
      }
      case 286: switch(this.l()) {
        case ',': this.c(287); continue;
        default: this.s=288; continue;
      }
      case 287: if(this.simplePath(_={category:'artref'},286)) {incl=_.ref; $.art.includes.push( incl ); } continue;
      case 288: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},289); continue;
        default: this.s=289; continue;
      }
      case 289: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendProjection($,$next) {
    this.rule_(291,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 291: if(this.mk(292,'projection')) { $.art.expectedKind = this.valueWithLocation(); } continue;
      case 292: if(this.namePath(_={category:'Ext'},293)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 293: switch(this.lk()) {
        case 'with': this.ck(294); continue;
        default: this.s=294; continue;
      }
      case 294: this.s=295;{ this.docComment( $.art ); } continue;
      case 295: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},295); continue;
        default: this.s=296; continue;
      }
      case 296: switch(this.l()) {
        case '{': this.selectItemsList({query:$.art,clause:'columns',start:undefined},297); continue;
        default: this.s=297; continue;
      }
      case 297: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  annotateActionsBlock($,$next) {
    this.rule_(299,$next);
    for(;;) switch(this.s) {
      case 299: if(this.mk(300,'actions')) { $.art.actions = this.createDict(); } continue;
      case 300: this.m(301,'{'); continue;
      case 301: switch(this.l()) {
        case 'Id': case '@': this.annotateBoundAction({outer:$.art},302); continue;
        default: this.s=303; continue;
      }
      case 302: switch(this.l()) {
        case ';': this.c(301); continue;
        case '}': this.s=303; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(301); continue;
        default: this.e(); continue;
      }
      case 303: if(this.m(0,'}')) {this.afterBrace(); this.finalizeExtensionsDict( $.art.actions ); } continue;
      default: return this.exit_();
    }
  }
  annotateBoundAction($,$next) {
    this.rule_(305,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 305: switch(this.l()) {
        case '@': this.annoAssignStd({art},305); continue;
        default: this.s=306; continue;
      }
      case 306: if(this.mi(307,'ExtBoundAction')) { this.addDef( art, $.outer, 'actions', 'annotate', this.identAst() );
this.docComment( art ); } continue;
      case 307: switch(this.l()) {
        case '@': this.annoAssignStd({art},307); continue;
        default: this.s=308; continue;
      }
      case 308: switch(this.l()) {
        case '(': this.annotateParamsBlock({art},309); continue;
        default: this.s=309; continue;
      }
      case 309: switch(this.lk()) {
        case 'returns': this.lP() && this.annotateReturns({outer:art},0); continue;
        default: this.gr(['Id',';','@','}']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  annotateParamsBlock($,$next) {
    this.rule_(311,$next);
    for(;;) switch(this.s) {
      case 311: if(this.m(312,'(')) { $.art.params = this.createDict(); } continue;
      case 312: switch(this.l()) {
        case 'Id': case '@': this.annotateParam({outer:$.art},313); continue;
        default: this.s=314; continue;
      }
      case 313: switch(this.l()) {
        case ',': this.c(312); continue;
        case ')': this.s=314; continue;
        default: this.e(); continue;
      }
      case 314: if(this.m(0,')')) { this.finalizeExtensionsDict( $.art.params ); } continue;
      default: return this.exit_();
    }
  }
  annotateParam($,$next) {
    this.rule_(316,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 316: switch(this.l()) {
        case '@': this.annoAssignStd({art},316); continue;
        default: this.s=317; continue;
      }
      case 317: if(this.mi(318,'ExtParam')) { this.addDef( art, $.outer, 'params', 'annotate', this.identAst() );
this.docComment( art ); } continue;
      case 318: switch(this.l()) {
        case '@': this.annoAssignStd({art},318); continue;
        default: this.gr([')',',']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  annotateReturns($,$next) {
    this.rule_(320,$next);
    let art=new XsnArtifact();
    for(;;) switch(this.s) {
      case 320: if(this.mk(321,'returns')) { $.outer.returns = art; art.kind = 'annotate';
this.docComment( art ); } continue;
      case 321: switch(this.l()) {
        case '@': this.annoAssignStd({art},321); continue;
        default: this.s=322; continue;
      }
      case 322: switch(this.l()) {
        case '{': this.annotateElementsBlock({art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  annotateElementsBlock($,$next) {
    this.rule_(324,$next);
    for(;;) switch(this.s) {
      case 324: if(this.m(325,'{')) { $.art.elements = this.createDict(); } continue;
      case 325: switch(this.l()) {
        case 'Id': case '@': this.annotateElement({outer:$.art},326); continue;
        default: this.s=327; continue;
      }
      case 326: switch(this.l()) {
        case ';': this.c(325); continue;
        case '}': this.s=327; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(325); continue;
        default: this.e(); continue;
      }
      case 327: if(this.m(0,'}')) {this.afterBrace(); this.finalizeExtensionsDict( $.art.elements ); } continue;
      default: return this.exit_();
    }
  }
  annotateElement($,$next) {
    this.rule_(329,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 329: switch(this.l()) {
        case '@': this.annoAssignStd({art},329); continue;
        default: this.s=330; continue;
      }
      case 330: if(this.mi(331,'ExtElement')) { this.addDef( art, $.outer, 'elements', 'annotate', this.identAst() );
this.docComment( art ); } continue;
      case 331: switch(this.l()) {
        case '@': this.annoAssignStd({art},331); continue;
        default: this.s=332; continue;
      }
      case 332: switch(this.l()) {
        case '{': this.annotateElementsBlock({art},0); continue;
        default: this.gr(['Id',';','@','}']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  extendElementsBlock($,$next) {
    this.rule_(334,$next);
    for(;;) switch(this.s) {
      case 334: if(this.m(335,'{')) { $.art.elements = this.createDict( $.start ); } continue;
      case 335: switch(this.l()) {
        case 'Id': case '@': this.elementDefOrExtend({outer:$.art},336); continue;
        default: this.s=337; continue;
      }
      case 336: switch(this.l()) {
        case ';': this.c(335); continue;
        case '}': this.s=337; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(335); continue;
        default: this.e(); continue;
      }
      case 337: if(this.m(0,'}')) {this.afterBrace(); this.finalizeExtensionsDict( $.art.elements ); } continue;
      default: return this.exit_();
    }
  }
  elementDefOrExtend($,$next) {
    this.rule_(339,$next);
    let art=new XsnArtifact();
    let elements;
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 339: switch(this.l()) {
        case '@': this.annoAssignStd({art},339); continue;
        default: this.s=340; continue;
      }
      case 340: switch(this.lk()) {
        case 'Id': case '@': case 'key': this.elementDef({outer:$.outer,art},0); continue;
        case 'extend': this.ckP(341,['Id']); continue;
        default: this.ei(); continue;
      }
      case 341: switch(this.lk()) {
        case 'element': if(this.ckP(342,['Id'])) { art.expectedKind = this.valueWithLocation(); } continue;
        default: this.s=342; continue;
      }
      case 342: if(this.mi(343,'ExtElement')) { this.addDef( art, $.outer, 'elements', 'extend', this.identAst() ); } continue;
      case 343: switch(this.lk()) {
        case 'with': if(this.ck(346)) { this.docComment( art ); } continue;
        default: this.s=344;{ this.docComment( art ); } continue;
      }
      case 344: switch(this.l()) {
        case '@': this.annoAssignStd({art},344); continue;
        default: this.s=345; continue;
      }
      case 345: switch(this.l()) {
        case '{': this.extendElementsBlock({art,start:undefined},0); continue;
        default: this.gr(['Id',';','@','}','key']); continue;
      }
      case 346: switch(this.l()) {
        case '@': this.annoAssignStd({art},346); continue;
        default: this.s=347; continue;
      }
      case 347: switch(this.lk()) {
        case 'elements': if(this.ck(348)) elements=this.lb(); continue;
        case '{': this.s=348; continue;
        case 'enum': this.enumSymbolsBlock({art},0); continue;
        case '(': this.typeNamedArgsList({art},0); continue;
        default: this.gr(['Id',';','@','}','key']); continue;
      }
      case 348: this.extendElementsBlock({art,start:elements},0); continue;
      default: return this.exit_();
    }
  }
  typeOrIncludesSpec($,$next) {
    this.rule_(350,$next);
    let ref; let _;
    for(;;) switch(this.s) {
      case 350: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},351); continue;
        case ':': this.c(352); continue;
        default: this.e(); continue;
      }
      case 351: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 352: switch(this.lk()) {
        case '{': case 'many': case 'type': case 'array': case 'localized': case 'association': case 'composition': this.lP() && this.typeExpression({art:$.art},0); continue;
        case 'Id': if(this.simplePath(_={category:'artref'},353)) {ref=_.ref; $.art.type = ref; } continue;
        default: this.ei(); continue;
      }
      case 353: switch(this.l()) {
        case '(': case ':': this.typeRefOptArgs({art:$.art},354,408); continue;
        case ',': case '{': this.s=359;{ $.art.includes = [ $.art.type ]; delete $.art.type; } continue;
        default: this.s=354; continue;
      }
      case 354: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},355); continue;
        default: this.s=355; continue;
      }
      case 355: this.s=356;{ this.docComment( $.art ); } continue;
      case 356: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},356); continue;
        default: this.s=357; continue;
      }
      case 357: switch(this.lk()) {
        case 'enum': this.enumSymbolsBlock({art:$.art},358); continue;
        default: this.s=358; continue;
      }
      case 358: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 359: switch(this.l()) {
        case ',': this.c(360); continue;
        default: this.s=362; continue;
      }
      case 360: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},361)) {ref=_.ref; $.art.includes.push( ref ); } continue;
        default: this.s=362; continue;
      }
      case 361: switch(this.l()) {
        case ',': this.c(360); continue;
        case '{': this.s=362; continue;
        default: this.e(); continue;
      }
      case 362: this.elementsBlock({art:$.art},363); continue;
      case 363: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default: return this.exit_();
    }
  }
  typeExpression($,$next) {
    this.rule_(365,$next);
    let assoc; let card; let target; let cond; let _;
    for(;;) switch(this.s) {
      case 365: switch(this.lk()) {
        case '{': this.elementsBlock({art:$.art},366); continue;
        case 'Id': this.typeRefOptArgs({art:$.art},367); continue;
        case 'type': this.lP() && this.typeTypeOf({art:$.art},367); continue;
        case 'localized': if(this.ckP(372,['Id'])) { $.art.localized = this.valueWithLocation( true ); } continue;
        case 'association': if(this.ckP(375,['[','to'])) assoc=this.lb(); continue;
        case 'composition': if(this.ckP(382,['[','of'])) assoc=this.lb(); continue;
        case 'array': this.ckP(390,['of']); continue;
        case 'many': if(this.ckP(391,['Id','{'])) { $.art.items = { location: this.lb().location }; } continue;
        default: this.ei(); continue;
      }
      case 366: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      case 367: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},368); continue;
        default: this.s=368; continue;
      }
      case 368: this.s=369;{ this.docComment( $.art ); } continue;
      case 369: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},369); continue;
        default: this.s=370; continue;
      }
      case 370: switch(this.lk()) {
        case 'enum': this.enumSymbolsBlock({art:$.art},371); continue;
        default: this.s=371; continue;
      }
      case 371: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      case 372: if(this.typeRefOptArgs({art:$.art},373)) { this.docComment( $.art ); } continue;
      case 373: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},373); continue;
        default: this.s=374; continue;
      }
      case 374: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      case 375: switch(this.l()) {
        case '[': this.cardinality({art:$.art},376); continue;
        default: this.s=376; continue;
      }
      case 376: this.mk(377,'to'); continue;
      case 377: switch(this.lk()) {
        case 'one': case 'many': if(this.ckP(378,['Id'])) card=this.lb(); continue;
        default: this.s=378; continue;
      }
      case 378: if(this.simplePath(_={category:'artref'},379)) {target=_.ref; this.setAssocAndComposition( $.art, assoc, card, target ); } continue;
      case 379: switch(this.lk()) {
        case 'on': this.ck(380); continue;
        case '{': this.foreignKeysBlock({art:$.art},381); continue;
        default: this.s=381; continue;
      }
      case 380: if(this.condition(_={},0)) {cond=_.expr; $.art.on = cond; } continue;
      case 381: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      case 382: switch(this.l()) {
        case '[': this.cardinality({art:$.art},383); continue;
        default: this.s=383; continue;
      }
      case 383: this.mk(384,'of'); continue;
      case 384: switch(this.lk()) {
        case 'one': case 'many': if(this.ckP(385,['Id','{'])) card=this.lb(); continue;
        default: this.s=385; continue;
      }
      case 385: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},386)) {target=_.ref; this.setAssocAndComposition( $.art, assoc, card, target ); } continue;
        case '{': this.s=389;{ target = {}; this.setAssocAndComposition( $.art, assoc, card, target ); } continue;
        default: this.e(); continue;
      }
      case 386: switch(this.lk()) {
        case 'on': this.ck(387); continue;
        case '{': this.foreignKeysBlock({art:$.art},388); continue;
        default: this.s=388; continue;
      }
      case 387: if(this.condition(_={},0)) {cond=_.expr; $.art.on = cond; } continue;
      case 388: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      case 389: if(this.elementsBlock({art:target},0)) { target.location = target.elements[Symbol.for('cds.$location')]; } continue;
      case 390: if(this.mk(391,'of')) { $.art.items = { location: this.locationOfPrevTokens( 2 ) }; } continue;
      case 391: switch(this.lk()) {
        case '{': this.elementsBlock({art:$.art.items},392); continue;
        case 'Id': this.typeRefOptArgs({art:$.art.items},393); continue;
        case 'type': this.lP() && this.typeTypeOf({art:$.art.items},393); continue;
        default: this.ei(); continue;
      }
      case 392: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art.items},0); continue;
        default: this.gr([]); continue;
      }
      case 393: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art.items},394); continue;
        default: this.s=394; continue;
      }
      case 394: this.s=395;{ this.docComment( $.art.items ); } continue;
      case 395: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art.items},395); continue;
        default: this.s=396; continue;
      }
      case 396: switch(this.lk()) {
        case 'enum': this.enumSymbolsBlock({art:$.art.items},397); continue;
        default: this.s=397; continue;
      }
      case 397: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art.items},0); continue;
        default: this.gr([]); continue;
      }
      default: return this.exit_();
    }
  }
  typeTypeOf($,$next) {
    this.rule_(399,$next);
    let location;
    let type; let _;
    for(;;) switch(this.s) {
      case 399: this.mk(400,'type'); continue;
      case 400: if(this.mk(401,'of')) { location = this.locationOfPrevTokens( 2 ); } continue;
      case 401: if(this.simplePath(_={category:'ref'},402)) {type=_.ref; $.art.type = type; } continue;
      case 402: switch(this.l()) {
        case ':': if(this.c(403)) { type.scope = type.path.length; } continue;
        default: if(this.gr(['@'])) { type.scope = 'typeOf'; type.path.unshift( { id: 'type of', location } ); } continue;
      }
      case 403: if(this.miA(404,'ref')) { type.path.push( this.identAst() ); } continue;
      case 404: switch(this.l()) {
        case '.': this.c(405); continue;
        default: this.gr(['@']); continue;
      }
      case 405: if(this.miA(404,'ref')) { type.path.push( this.identAst() ); } continue;
      default: return this.exit_();
    }
  }
  typeRefOptArgs($,$next,$startState) {
    this.rule_($startState??407,$next);
    let type=$.art.type;
    let open; let tok; let _;
    for(;;) switch(this.s) {
      case 407: if(this.simplePath(_={category:'artref'},408)) {type=_.ref; $.art.type = type; } continue;
      case 408: switch(this.l()) {
        case ':': if(this.c(409)) { type.scope = type.path.length; } continue;
        case '(': if(this.c(412)) open=this.lb(); continue;
        default: this.gr([]); continue;
      }
      case 409: if(this.miA(410,'ref')) { type.path.push( this.identAst() ); } continue;
      case 410: switch(this.l()) {
        case '.': this.c(411); continue;
        default: this.gr([]); continue;
      }
      case 411: if(this.miA(410,'ref')) { type.path.push( this.identAst() ); } continue;
      case 412: switch(this.lk()) {
        case 'Number': if(this.c(413)) { $.art.$typeArgs = this.createArray( open );
$.art.$typeArgs.push( this.unsignedIntegerLiteral() ); } continue;
        case 'Id': this.s=415;{ $.art.$typeArgs = this.createDict( open ); } continue;
        default: this.ei(); continue;
      }
      case 413: switch(this.l()) {
        case ',': this.c(414); continue;
        default: this.s=417; continue;
      }
      case 414: switch(this.lk()) {
        case 'Number': if(this.c(413)) { $.art.$typeArgs.push( this.unsignedIntegerLiteral() ); } continue;
        case 'floating': case 'variable': if(this.ck(413)) {tok=this.lb(); $.art.$typeArgs.push( { literal: 'string', val: tok.keyword, location: tok.location } ); } continue;
        case ')': this.s=417; continue;
        default: this.e(); continue;
      }
      case 415: switch(this.l()) {
        case 'Id': this.typeNamedArg({art:$.art},416); continue;
        default: this.s=417; continue;
      }
      case 416: switch(this.l()) {
        case ',': this.c(415); continue;
        case ')': this.s=417; continue;
        default: this.e(); continue;
      }
      case 417: if(this.m(0,')')) { this.finalizeDictOrArray( $.art.$typeArgs ); } continue;
      default: return this.exit_();
    }
  }
  typeNamedArgsList($,$next) {
    this.rule_(419,$next);
    for(;;) switch(this.s) {
      case 419: if(this.m(420,'(')) { $.art.$typeArgs = this.createDict(); } continue;
      case 420: switch(this.l()) {
        case 'Id': this.typeNamedArg({art:$.art},421); continue;
        default: this.s=422; continue;
      }
      case 421: switch(this.l()) {
        case ',': this.c(420); continue;
        case ')': this.s=422; continue;
        default: this.e(); continue;
      }
      case 422: if(this.m(0,')')) { this.finalizeDictOrArray( $.art.$typeArgs ); } continue;
      default: return this.exit_();
    }
  }
  typeNamedArg($,$next) {
    this.rule_(424,$next);
    let name; let tok;
    for(;;) switch(this.s) {
      case 424: if(this.mi(425,'typeparamname')) name=this.lb(); continue;
      case 425: this.m(426,':'); continue;
      case 426: switch(this.lk()) {
        case 'Number': if(this.c(0)) { this.setTypeFacet( $.art, name, this.unsignedIntegerLiteral() ); } continue;
        case 'floating': case 'variable': if(this.ck(0)) {tok=this.lb(); this.setTypeFacet( $.art, name, { literal: 'string', val: tok.keyword, location: tok.location } ); } continue;
        default: this.e(); continue;
      }
      default: return this.exit_();
    }
  }
  cardinality($,$next) {
    this.rule_(428,$next);
    let card={};
    for(;;) switch(this.s) {
      case 428: this.m(429,'['); continue;
      case 429: switch(this.l()) {
        case '*': if(this.c(430)) { card.targetMax = this.valueWithLocation(); } continue;
        case 'Number': if(this.c(432)) { card.targetMax = this.unsignedIntegerLiteral(); } continue;
        default: this.s=434;{ card.targetMax = this.valueWithLocation( '*' ); } continue;
      }
      case 430: switch(this.l()) {
        case ',': this.c(431); continue;
        default: this.s=434; continue;
      }
      case 431: this.targetCardinality({card,atAlt:false},434); continue;
      case 432: switch(this.l()) {
        case ',': this.c(433); continue;
        case '..': this.targetCardinality({card,atAlt:true},434,437); continue;
        default: this.s=434; continue;
      }
      case 433: this.targetCardinality({card,atAlt:false},434); continue;
      case 434: this.m(0,']'); continue;
      default:
      $.art.cardinality = this.attachLocation(card);
      return this.exit_();
    }
  }
  targetCardinality($,$next,$startState) {
    this.rule_($startState??436,$next);
    { if (!$.atAlt) $.card.sourceMax = $.card.targetMax; }
    for(;;) switch(this.s) {
      case 436: switch(this.l()) {
        case '*': if(this.c(0)) { $.card.targetMax = this.valueWithLocation(); } continue;
        case 'Number': if(this.c(437)) { $.card.targetMax = this.unsignedIntegerLiteral(); } continue;
        default: this.e(); continue;
      }
      case 437: switch(this.l()) {
        case '..': if(this.c(438)) { $.card.targetMin = $.card.targetMax; } continue;
        default: this.gr([']']); continue;
      }
      case 438: switch(this.l()) {
        case '*': if(this.c(0)) { $.card.targetMax = this.valueWithLocation(); } continue;
        case 'Number': if(this.c(0)) { $.card.targetMax = this.unsignedIntegerLiteral(); } continue;
        default: this.e(); continue;
      }
      default: return this.exit_();
    }
  }
  nullabilityAndDefault($,$next) {
    this.rule_(440,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 440: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},441); continue;
        case 'default': this.ck(443); continue;
        default: this.e(); continue;
      }
      case 441: switch(this.lk()) {
        case 'default': this.ck(442); continue;
        default: this.gr([]); continue;
      }
      case 442: if(this.expression(_={},0)) {expr=_.expr; $.art.default = expr; } continue;
      case 443: if(this.expression(_={},444)) {expr=_.expr; $.art.default = expr; } continue;
      case 444: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      default: return this.exit_();
    }
  }
  nullability($,$next) {
    this.rule_(446,$next);
    for(;;) switch(this.s) {
      case 446: switch(this.lk()) {
        case 'null': if(this.ck(0)) { this.setNullability( $.art, false ); } continue;
        case 'not': this.ck(447); continue;
        default: this.e(); continue;
      }
      case 447: if(this.mk(0,'null')) { this.setNullability( $.art, true, this.locationOfPrevTokens( 2 ) ); } continue;
      default: return this.exit_();
    }
  }
  queryEOF($,$next) {
    $.query??=undefined;
    this.rule_(449,$next);
    let _;
    for(;;) switch(this.s) {
      case 449: if(this.queryExpression(_={},450)) $.query=_.expr; continue;
      case 450: switch(this.l()) {
        case ';': this.c(451); continue;
        default: this.s=451; continue;
      }
      case 451: this.m(0,'EOF'); continue;
      default: return this.exit_();
    }
  }
  projectionSpec($,$next) {
    $.query??={};
    this.rule_(453,$next);
    let tab; let _;
    for(;;) switch(this.s) {
      case 453: if(this.mk(454,'projection')) { $.query = { op: this.valueWithLocation( 'SELECT' ) }; } continue;
      case 454: this.mk(455,'on'); continue;
      case 455: if(this.fromRefWithOptAlias(_={},456)) {tab=_.expr; this.afterBrace();
$.query.from = tab; } continue;
      case 456: switch(this.l()) {
        case '{': this.selectItemsList({query:$.query,clause:'columns',start:undefined},457); continue;
        default: this.s=457; continue;
      }
      case 457: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:$.query},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation($.query);
      return this.exit_();
    }
  }
  queryExpression($,$next,$startState) {
    $.expr??={};
    this.rule_($startState??459,$next);
    let op; let quantifier;
    let query; let _;
    for(;;) switch(this.s) {
      case 459: switch(this.l()) {
        case '(': this.c(460); continue;
        case 'Id': if(this.selectQuery(_={},462)) $.expr=_.query; continue;
        default: this.e(); continue;
      }
      case 460: this.queryExpression($,461); continue;
      case 461: if(this.m(462,')')) { this.surroundByParens( $.expr ); } continue;
      case 462: switch(this.lk()) {
        case 'intersect': if(this.gp(466,4) && this.ck(463)) { op = this.valueWithLocation(); } continue;
        case 'minus': case 'except': if(this.gp(466,2) && this.ck(463)) { op = this.valueWithLocation(); } continue;
        case 'union': if(this.gp(466,2) && this.ck(464)) { op = this.valueWithLocation(); } continue;
        default: this.s=466; continue;
      }
      case 463: switch(this.lk()) {
        case 'distinct': if(this.ck(465)) { quantifier = this.valueWithLocation(); } continue;
        default: this.s=465; continue;
      }
      case 464: switch(this.lk()) {
        case 'all': case 'distinct': if(this.ck(465)) { quantifier = this.valueWithLocation(); } continue;
        default: this.s=465; continue;
      }
      case 465: if(this.queryExpression(_={},462)) {query=_.expr; if ($.expr.$parens || op.val !== $.expr.op.val || quantifier?.val !== $.expr.quantifier?.val) $.expr = { op, args: [$.expr], quantifier };
quantifier = undefined;
$.expr.args.push( query ); this.attachLocation( $.expr ); } continue;
      case 466: switch(this.lk()) {
        case 'limit': case 'order': if(this.gp(0,0,'post') && this.g(467)) { if ($.expr.$parens) { this.attachLocation( $.expr ); $.expr = { op: this.valueWithLocation( '$query', this.la() ), args: [ $.expr ] }; } } continue;
        default: this.gr([]); continue;
      }
      case 467: this.orderByLimitOffset({query:$.expr},0); continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  selectQuery($,$next) {
    $.query??={};
    this.rule_(469,$next);
    for(;;) switch(this.s) {
      case 469: if(this.mk(470,'select')) { $.query = { op: this.valueWithLocation( 'SELECT' ) }; } continue;
      case 470: switch(this.lk()) {
        case 'from': this.ck(471); continue;
        case 'all': case 'distinct': if(this.ckP(481,['Id','#','(','*','+','-',':','?','@','{','key','not','case','cast','null','true','false','Number','String','exists','QuotedLiteral'])) { $.query.quantifier = this.valueWithLocation(); } continue;
        case 'Id': case '#': case '(': case '*': case '+': case '-': case ':': case '?': case '@': case '{': case 'key': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': this.s=481; continue;
        default: this.ei(); continue;
      }
      case 471: this.querySource({query:$.query},472); continue;
      case 472: switch(this.lk()) {
        case 'mixin': this.ck(473); continue;
        default: this.s=478; continue;
      }
      case 473: if(this.m(474,'{')) { $.query.mixin = this.createDict(); } continue;
      case 474: switch(this.l()) {
        case 'Id': this.mixinElementDef({outer:$.query},475); continue;
        default: this.s=476; continue;
      }
      case 475: switch(this.l()) {
        case ';': this.c(474); continue;
        case '}': this.s=476; continue;
        default: this.e(); continue;
      }
      case 476: if(this.m(477,'}')) { this.finalizeDictOrArray( $.query.mixin ); } continue;
      case 477: this.mk(478,'into'); continue;
      case 478: switch(this.lk()) {
        case 'all': case 'distinct': if(this.ck(479)) { $.query.quantifier = this.valueWithLocation(); } continue;
        default: this.s=479; continue;
      }
      case 479: switch(this.l()) {
        case '{': this.selectItemsList({query:$.query,clause:'columns',start:undefined},480); continue;
        default: this.s=480; continue;
      }
      case 480: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:$.query},486); continue;
        default: this.s=486; continue;
      }
      case 481: switch(this.l()) {
        case '*': if(this.c(482)) { $.query.columns = [ this.valueWithLocation() ]; } continue;
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case '@': case '{': case 'Number': case 'String': case 'QuotedLiteral': this.selectItemDef({columns:($.query.columns = [])},482); continue;
        default: this.e(); continue;
      }
      case 482: switch(this.l()) {
        case ',': this.c(483); continue;
        default: this.s=484; continue;
      }
      case 483: switch(this.l()) {
        case '*': if(this.c(482)) { $.query.columns.push( this.valueWithLocation() ); } continue;
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case '@': case '{': case 'Number': case 'String': case 'QuotedLiteral': this.selectItemDef({columns:$.query.columns},482); continue;
        default: this.e(); continue;
      }
      case 484: this.mk(485,'from'); continue;
      case 485: this.querySource({query:$.query},486); continue;
      case 486: switch(this.lk()) {
        case 'group': case 'where': case 'having': this.whereGroupByHaving({query:$.query},0); continue;
        default: this.gr(['limit','minus','order','union','except','intersect']); continue;
      }
      default:
      this.attachLocation($.query);
      return this.exit_();
    }
  }
  querySource($,$next) {
    this.rule_(488,$next);
    let tab; let _;
    for(;;) switch(this.s) {
      case 488: if(this.tableExpression(_={},489)) {tab=_.expr; $.query.from = tab; } continue;
      case 489: switch(this.l()) {
        case ',': this.s=490;{ const { location } = this.la();
$.query.from = { op: { val: 'join', location }, join: { val: 'cross', location }, args: [tab] }; } continue;
        default: this.gr(['group','limit','minus','order','union','where','except','having','intersect']); continue;
      }
      case 490: switch(this.l()) {
        case ',': this.c(491); continue;
        default: this.gr(['group','limit','minus','order','union','where','except','having','intersect']); continue;
      }
      case 491: if(this.tableExpression(_={},490)) {tab=_.expr; $.query.from.args.push( tab ); } continue;
      case 0:
      this.attachLocation($.query.from);
      default: return this.exit_();
    }
  }
  tableExpression($,$next,$startState) {
    $.expr??=undefined;
    this.rule_($startState??493,$next);
    let join; let tab; let card; let cond; let _;
    for(;;) switch(this.s) {
      case 493: switch(this.l()) {
        case '(': this.tableOrQueryParens($,494); continue;
        case 'Id': this.fromRefWithOptAlias($,495); continue;
        default: this.e(); continue;
      }
      case 494: this.s=495;{ $.expr = this.taggedIfQuery( $.expr ); } continue;
      case 495: switch(this.lk()) {
        case 'cross': if(this.ck(496)) join=this.lb(); continue;
        case 'inner': if(this.ck(499)) join=this.lb(); continue;
        case 'full': case 'left': case 'right': if(this.ck(498)) join=this.lb(); continue;
        case 'join': this.s=500; continue;
        default: if(this.gr([])) { join = undefined; } continue;
      }
      case 496: if(this.mk(497,'join')) { if ($.expr?.join?.val !== 'cross' || $.expr.$parens) $.expr = { op: this.valueWithLocation(), join: this.valueWithLocation( undefined, join ), args: [ $.expr ] }; } continue;
      case 497: switch(this.l()) {
        case '(': if(this.tableOrQueryParens(_={},495)) {tab=_.expr; $.expr.args.push( this.taggedIfQuery( tab ) );
this.attachLocation( $.expr ); } continue;
        case 'Id': if(this.fromRefWithOptAlias(_={},495)) {tab=_.expr; $.expr.args.push( tab );
this.attachLocation( $.expr ); } continue;
        default: this.e(); continue;
      }
      case 498: switch(this.lk()) {
        case 'outer': this.ck(499); continue;
        default: this.s=499; continue;
      }
      case 499: switch(this.lk()) {
        case 'one': case 'many': case 'exact': this.joinCardinality(card={},500); continue;
        default: this.s=500; continue;
      }
      case 500: if(this.mk(501,'join')) { $.expr = { op: this.valueWithLocation(), join: this.valueWithLocation( join?.keyword || 'inner', join ), args: [ $.expr ] }; if (card) $.expr.cardinality = card; card = undefined;
join = undefined; } continue;
      case 501: if(this.tableExpression(_={},502)) {tab=_.expr; $.expr.args.push( tab ); this.attachLocation( $.expr ); } continue;
      case 502: this.mk(503,'on'); continue;
      case 503: if(this.condition(_={},495)) {cond=_.expr; $.expr.on = cond;
this.attachLocation( $.expr ); } continue;
      default: return this.exit_();
    }
  }
  tableOrQueryParens($,$next) {
    $.expr??=undefined;
    this.rule_(505,$next);
    for(;;) switch(this.s) {
      case 505: this.m(506,'('); continue;
      case 506: switch(this.lk()) {
        case '(': this.tableOrQueryParens($,507); continue;
        case 'Id': this.ep(-2) && this.tableExpression($,508); continue;
        case 'select': this.ep(-1) && this.queryExpression($,508); continue;
        default: this.ei(); continue;
      }
      case 507: switch(this.lk()) {
        case 'full': case 'join': case 'left': case 'cross': case 'inner': case 'right': this.gp(508,-2,'post') && this.tableExpression($,508,494); continue;
        case 'limit': case 'minus': case 'order': case 'union': case 'except': case 'intersect': this.gp(508,-1,'post') && this.queryExpression($,508,462); continue;
        default: this.s=508; continue;
      }
      case 508: if(this.m(509,')')) { this.surroundByParens( $.expr ); } continue;
      case 509: switch(this.lk()) {
        case 'as': this.gp(0,-2,'none') && this.ck(510); continue;
        case 'Id': if(this.gc(0,'tableAlias') && this.ci(0,'FromAlias')) {this.setPrecInCallingRule(); $.expr = this.taggedIfQuery( $.expr ); $.expr.name = this.fragileAlias(); } continue;
        default: if(this.gi(0,['full','join','left','cross','inner','right'])) { this.setPrecInCallingRule(); } continue;
      }
      case 510: if(this.mi(0,'FromAlias')) {this.setPrecInCallingRule(); $.expr = this.taggedIfQuery( $.expr ); $.expr.name = this.identAst(); } continue;
      default: return this.exit_();
    }
  }
  joinCardinality($,$next) {
    $.sourceMax??=undefined; $.targetMax??=undefined;
    this.rule_(512,$next);
    for(;;) switch(this.s) {
      case 512: switch(this.lk()) {
        case 'exact': if(this.ck(513)) { $.sourceMin = this.valueWithLocation( 1 ); } continue;
        case 'one': this.s=513; continue;
        case 'many': if(this.ck(514)) { $.sourceMax = this.valueWithLocation( '*' ); } continue;
        default: this.e(); continue;
      }
      case 513: if(this.mk(514,'one')) { $.sourceMax = this.valueWithLocation( 1 ); } continue;
      case 514: this.mk(515,'to'); continue;
      case 515: switch(this.lk()) {
        case 'exact': if(this.ck(516)) { $.targetMin = this.valueWithLocation( 1 ); } continue;
        case 'one': this.s=516; continue;
        case 'many': if(this.ck(0)) { $.targetMax = this.valueWithLocation( '*' ); } continue;
        default: this.e(); continue;
      }
      case 516: if(this.mk(0,'one')) { $.targetMax = this.valueWithLocation( 1 ); } continue;
      default:
      this.attachLocation( $ );
      return this.exit_();
    }
  }
  fromRefWithOptAlias($,$next) {
    $.expr??={ path: [] };
    this.rule_(518,$next);
    for(;;) switch(this.s) {
      case 518: this.fromPath({table:$.expr,category:'artref'},519); continue;
      case 519: switch(this.l()) {
        case ':': if(this.c(520)) { if (!$.expr.scope) $.expr.scope = $.expr.path.length; else {
this.warning( 'syntax-invalid-path-separator', this.lb(),
{ '#': 'colon', code: ':', newcode: '.' } );
} } continue;
        default: this.s=521; continue;
      }
      case 520: this.fromPath({table:$.expr,category:'ref'},521); continue;
      case 521: switch(this.lk()) {
        case 'as': this.ck(522); continue;
        case 'Id': if(this.gc(0,'tableAlias') && this.ci(0,'FromAlias')) { $.expr.name = this.fragileAlias(); } continue;
        default: if(this.gi(0,[])) { this.classifyImplicitName( $.expr.scope ? 'FromElemImplicit' : 'FromImplicit', $.expr ); } continue;
      }
      case 522: if(this.mi(0,'FromAlias')) { $.expr.name = this.identAst(); } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  fromPath($,$next) {
    this.rule_(524,$next);
    let pathItem;
    for(;;) switch(this.s) {
      case 524: if(this.mi(525,$.category)) { $.table.path.push( pathItem = this.identAst() ); } continue;
      case 525: switch(this.l()) {
        case '(': case '[': if(this.fromArgumentsAndFilter({pathStep:pathItem},526)) { pathItem = null; } continue;
        default: this.s=526; continue;
      }
      case 526: switch(this.l()) {
        case '.': if(this.c(527)) { if (!pathItem && !$.table.scope) {
$.table.scope = $.table.path.length; $.category = 'ref';
this.warning( 'syntax-invalid-path-separator', this.lb(),
{ '#': 'dot', code: '.', newcode: ':' } );
} } continue;
        default: this.gr(['Id','as']); continue;
      }
      case 527: if(this.miA(528,$.category)) { $.table.path.push( pathItem = this.identAst() ); } continue;
      case 528: switch(this.l()) {
        case '(': case '[': if(this.fromArgumentsAndFilter({pathStep:pathItem},526)) { pathItem = null; } continue;
        default: this.s=526; continue;
      }
      default:
      this.attachLocation( $.table.path );
      return this.exit_();
    }
  }
  fromArgumentsAndFilter($,$next) {
    this.rule_(530,$next);
    for(;;) switch(this.s) {
      case 530: switch(this.l()) {
        case '(': if(this.c(531)) { $.pathStep.args = this.createDict(); $.pathStep.$syntax = ':'; } continue;
        default: this.s=535; continue;
      }
      case 531: switch(this.lk()) {
        case 'Id': this.s=532; continue;
        default: this.ei(); continue;
      }
      case 532: switch(this.l()) {
        case 'Id': this.fromNamedArgument($,533); continue;
        default: this.s=534; continue;
      }
      case 533: switch(this.l()) {
        case ',': this.c(532); continue;
        case ')': this.s=534; continue;
        default: this.e(); continue;
      }
      case 534: this.m(535,')'); continue;
      case 535: switch(this.l()) {
        case '[': this.cardinalityAndFilter($,0); continue;
        default: this.gr(['Id','.','as']); continue;
      }
      default: return this.exit_();
    }
  }
  fromNamedArgument($,$next) {
    this.rule_(537,$next);
    let name; let expr; let _;
    for(;;) switch(this.s) {
      case 537: if(this.mi(538,'paramname')) name=this.lb(); continue;
      case 538: this.m(539,':'); continue;
      case 539: if(this.expression(_={},0)) {expr=_.expr; this.addDef( expr, $.pathStep, 'args', 0, this.identAst( name ) ); } continue;
      default: return this.exit_();
    }
  }
  cardinalityAndFilter($,$next) {
    this.rule_(541,$next);
    for(;;) switch(this.s) {
      case 541: this.m(542,'['); continue;
      case 542: switch(this.l()) {
        case 'Number': if(this.gc(544,'beforeColon') && this.c(543)) { $.pathStep.cardinality = { targetMax: this.unsignedIntegerLiteral(), location: this.lb().location }; } continue;
        default: this.s=544; continue;
      }
      case 543: this.m(544,':'); continue;
      case 544: this.filterClauses({pathStep:$.pathStep},545); continue;
      case 545: this.m(0,']'); continue;
      default: return this.exit_();
    }
  }
  filterClauses($,$next) {
    this.rule_(547,$next);
    let cond; let _;
    for(;;) switch(this.s) {
      case 547: switch(this.lk()) {
        case 'where': this.ck(548); continue;
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': this.s=548; continue;
        case 'group': case 'limit': case 'order': case 'having': this.gP(549); continue;
        default: this.gi(549); continue;
      }
      case 548: if(this.condition(_={},549)) {cond=_.expr; $.pathStep.where = cond; } continue;
      case 549: switch(this.lk()) {
        case 'group': this.s=550;{ this.csnParseOnly('syntax-unexpected-sql-clause', 1, { keyword: 'group by' }); } continue;
        default: this.s=551; continue;
      }
      case 550: this.groupByClause({query:$.pathStep},551); continue;
      case 551: switch(this.lk()) {
        case 'having': if(this.ck(552)) { this.csnParseOnly('syntax-unexpected-sql-clause', -1, { keyword: 'having' }); } continue;
        default: this.s=553; continue;
      }
      case 552: if(this.condition(_={},553)) {cond=_.expr; $.pathStep.having = cond; } continue;
      case 553: switch(this.lk()) {
        case 'limit': case 'order': this.s=554;{ if (this.lk() === 'limit') this.csnParseOnly('syntax-unexpected-sql-clause', 0, { keyword: 'limit' } ); else this.csnParseOnly('syntax-unexpected-sql-clause', 1, { keyword: 'order by' } ); } continue;
        default: this.gr([']']); continue;
      }
      case 554: this.orderByLimitOffset({query:$.pathStep},0); continue;
      default: return this.exit_();
    }
  }
  excludingClause($,$next) {
    this.rule_(556,$next);
    for(;;) switch(this.s) {
      case 556: this.mk(557,'excluding'); continue;
      case 557: if(this.m(558,'{')) { $.query.excludingDict = this.createDict(); } continue;
      case 558: switch(this.l()) {
        case 'Id': this.s=559; continue;
        default: this.e(); continue;
      }
      case 559: switch(this.l()) {
        case 'Id': if(this.ciA(560,'ref')) { this.addDef( { location: this.lb().location }, $.query, 'excludingDict', '', this.identAst() ); } continue;
        default: this.s=561; continue;
      }
      case 560: switch(this.l()) {
        case ',': this.c(559); continue;
        case '}': this.s=561; continue;
        default: this.e(); continue;
      }
      case 561: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.query.excludingDict ); } continue;
      default: return this.exit_();
    }
  }
  selectItemsList($,$next) {
    this.rule_(563,$next);
    for(;;) switch(this.s) {
      case 563: if(this.m(564,'{')) { $.query[$.clause] = this.createArray( $.start ); } continue;
      case 564: switch(this.l()) {
        case '*': if(this.c(565)) { $.query[$.clause].push( this.valueWithLocation() ); } continue;
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case '@': case '{': case 'Number': case 'String': case 'QuotedLiteral': this.selectItemDef({columns:$.query[$.clause]},565); continue;
        default: this.s=566; continue;
      }
      case 565: switch(this.l()) {
        case ',': this.c(564); continue;
        case '}': this.s=566; continue;
        default: this.e(); continue;
      }
      case 566: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.query[$.clause] ); } continue;
      default: return this.exit_();
    }
  }
  selectItemDef($,$next) {
    this.rule_(568,$next);
    let art=new XsnArtifact(); let alias;
    let expr; let as; let target; let cond; let assoc; let card; let _;
    { $.columns.push( art );
this.docComment( art ); }
    for(;;) switch(this.s) {
      case 568: switch(this.l()) {
        case '@': this.annoAssignCol({art},568); continue;
        default: this.s=569; continue;
      }
      case 569: switch(this.lk()) {
        case 'virtual': if(this.ckP(570,['Id','#','(','+','-',':','?','{','key','not','case','cast','null','true','false','Number','String','exists','QuotedLiteral'])) { art.virtual = this.valueWithLocation( true ); } continue;
        default: this.s=570; continue;
      }
      case 570: switch(this.lk()) {
        case 'key': if(this.ck(571)) { art.key = this.valueWithLocation( true ); } continue;
        default: this.s=571; continue;
      }
      case 571: switch(this.l()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'Number': case 'String': case 'QuotedLiteral': if(this.expression(_={},572)) {expr=_.expr; art.value = expr; } continue;
        case '{': this.selectItemsList({query:art,clause:'expand',start:undefined},579); continue;
        default: this.e(); continue;
      }
      case 572: switch(this.lk()) {
        case 'as': if(this.ck(573)) as=this.lb(); continue;
        case 'Id': if(this.ci(574,'ItemAlias')) { art.name = this.fragileAlias( true ); } continue;
        default: if(this.gi(574)) { alias = this.classifyImplicitName( 'ItemImplicit', expr ); } continue;
      }
      case 573: if(this.mi(574,'ItemAlias')) { art.name = this.identAst(); } continue;
      case 574: switch(this.l()) {
        case '{': this.s=575;{ this.reportExpandInline( art, false ); } continue;
        case '.': if(this.c(577)) { this.reportExpandInline( art, as || true );
if (alias) alias.token.parsed = alias.parsed; } continue;
        default: this.s=582; continue;
      }
      case 575: this.selectItemsList({query:art,clause:'expand',start:undefined},576); continue;
      case 576: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:art},582); continue;
        default: this.s=582; continue;
      }
      case 577: switch(this.l()) {
        case '{': this.selectItemsList({query:art,clause:'inline',start:undefined},578); continue;
        case '*': if(this.c(582)) { art.inline = [ this.valueWithLocation() ]; } continue;
        default: this.e(); continue;
      }
      case 578: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:art},582); continue;
        default: this.s=582; continue;
      }
      case 579: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:art},580); continue;
        default: this.s=580; continue;
      }
      case 580: this.mk(581,'as'); continue;
      case 581: if(this.mi(582,'ItemAlias')) { art.name = this.identAst(); } continue;
      case 582: this.s=583;{ this.docComment( art ); } continue;
      case 583: switch(this.l()) {
        case '@': this.annoAssignMid({art},583); continue;
        default: this.s=584; continue;
      }
      case 584: switch(this.l()) {
        case ':': this.c(585); continue;
        default: this.gr([',']); continue;
      }
      case 585: switch(this.lk()) {
        case 'type': this.lP() && this.typeTypeOf({art},599); continue;
        case 'localized': if(this.ckP(586,['Id'])) { art.localized = this.valueWithLocation( true ); } continue;
        case 'Id': this.s=586; continue;
        case 'redirected': this.ckP(587,['to']); continue;
        case 'association': if(this.ckP(591,['[','to'])) {assoc=this.lb(); this.associationInSelectItem( art ); } continue;
        case 'composition': if(this.ckP(593,['[','of'])) {assoc=this.lb(); this.associationInSelectItem( art ); } continue;
        default: this.ei(); continue;
      }
      case 586: this.typeRefOptArgs({art},599); continue;
      case 587: this.mk(588,'to'); continue;
      case 588: if(this.simplePath(_={category:'artref'},589)) {target=_.ref; art.target = target; } continue;
      case 589: switch(this.lk()) {
        case 'on': this.ck(590); continue;
        case '{': this.foreignKeysBlock({art},599); continue;
        default: this.s=599; continue;
      }
      case 590: if(this.condition(_={},599)) {cond=_.expr; art.on = cond; } continue;
      case 591: switch(this.l()) {
        case '[': this.cardinality({art},592); continue;
        default: this.s=592; continue;
      }
      case 592: this.mk(595,'to'); continue;
      case 593: switch(this.l()) {
        case '[': this.cardinality({art},594); continue;
        default: this.s=594; continue;
      }
      case 594: this.mk(595,'of'); continue;
      case 595: switch(this.lk()) {
        case 'one': case 'many': if(this.ckP(596,['Id'])) card=this.lb(); continue;
        default: this.s=596; continue;
      }
      case 596: if(this.simplePath(_={category:'artref'},597)) {target=_.ref; this.setAssocAndComposition( art, assoc, card, target ); } continue;
      case 597: this.mk(598,'on'); continue;
      case 598: if(this.condition(_={},599)) {expr=_.expr; art.on = expr; } continue;
      case 599: this.s=600;{ this.docComment( art ); } continue;
      case 600: switch(this.l()) {
        case '@': this.annoAssignStd({art},600); continue;
        default: this.gr([',']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  whereGroupByHaving($,$next) {
    this.rule_(602,$next);
    let cond; let _;
    for(;;) switch(this.s) {
      case 602: switch(this.lk()) {
        case 'where': this.ck(603); continue;
        default: this.s=604; continue;
      }
      case 603: if(this.condition(_={},604)) {cond=_.expr; $.query.where = cond; } continue;
      case 604: switch(this.lk()) {
        case 'group': this.groupByClause($,605); continue;
        default: this.s=605; continue;
      }
      case 605: switch(this.lk()) {
        case 'having': this.ck(606); continue;
        default: this.gr(['limit','order']); continue;
      }
      case 606: if(this.condition(_={},0)) {cond=_.expr; $.query.having = cond; } continue;
      default: return this.exit_();
    }
  }
  groupByClause($,$next) {
    this.rule_(608,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 608: this.mk(609,'group'); continue;
      case 609: this.mk(610,'by'); continue;
      case 610: if(this.expression(_={},611)) {expr=_.expr; $.query.groupBy = [ expr ]; } continue;
      case 611: switch(this.l()) {
        case ',': this.c(612); continue;
        default: this.gr(['limit','order','having']); continue;
      }
      case 612: if(this.expression(_={},611)) {expr=_.expr; $.query.groupBy.push( expr ); } continue;
      default: return this.exit_();
    }
  }
  orderByLimitOffset($,$next) {
    this.rule_(614,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 614: switch(this.lk()) {
        case 'order': this.orderByClause($,615); continue;
        default: this.s=615; continue;
      }
      case 615: switch(this.lk()) {
        case 'limit': this.ck(616); continue;
        default: this.gr([]); continue;
      }
      case 616: if(this.expression(_={},617)) {expr=_.expr; $.query.limit = { rows: expr }; } continue;
      case 617: switch(this.lk()) {
        case 'offset': this.ck(618); continue;
        default: this.gr([]); continue;
      }
      case 618: if(this.expression(_={},0)) {expr=_.expr; $.query.limit.offset = expr; } continue;
      default: return this.exit_();
    }
  }
  orderByClause($,$next) {
    this.rule_(620,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 620: this.mk(621,'order'); continue;
      case 621: this.mk(622,'by'); continue;
      case 622: if(this.orderByExpression(_={},623)) {expr=_.expr; $.query.orderBy = [ expr ]; } continue;
      case 623: switch(this.l()) {
        case ',': this.c(624); continue;
        default: this.gr(['limit']); continue;
      }
      case 624: if(this.orderByExpression(_={},623)) {expr=_.expr; $.query.orderBy.push( expr ); } continue;
      default: return this.exit_();
    }
  }
  orderByExpression($,$next) {
    $.expr??=undefined;
    this.rule_(626,$next);
    for(;;) switch(this.s) {
      case 626: this.expression($,627); continue;
      case 627: switch(this.lk()) {
        case 'asc': case 'desc': if(this.ck(628)) { $.expr.sort = this.valueWithLocation(); } continue;
        default: this.s=628; continue;
      }
      case 628: switch(this.lk()) {
        case 'nulls': this.ck(629); continue;
        default: this.gr([',','limit']); continue;
      }
      case 629: switch(this.lk()) {
        case 'last': case 'first': if(this.ck(0)) { $.expr.nulls = this.valueWithLocation(); } continue;
        default: this.e(); continue;
      }
      default: return this.exit_();
    }
  }
  conditionEOF($,$next) {
    $.cond??=undefined;
    this.rule_(631,$next);
    let _;
    for(;;) switch(this.s) {
      case 631: if(this.expression(_={},632)) $.cond=_.expr; continue;
      case 632: this.m(0,'EOF'); continue;
      default: return this.exit_();
    }
  }
  condition($,$next) {
    $.expr??=undefined;
    this.rule_(634,$next);
    for(;;) switch(this.s) {
      case 634: this.expression($,0); continue;
      default: return this.exit_();
    }
  }
  valuePath($,$next,$startState) {
    $.expr??={ path: [] };
    this.rule_($startState??636,$next);
    let pathItem;
    for(;;) switch(this.s) {
      case 636: if(this.mi(637,'ref')) { $.expr.path.push( pathItem = this.identAst() ); } continue;
      case 637: switch(this.l()) {
        case '(': case '[': this.argumentsAndFilter({pathStep:pathItem},638); continue;
        default: this.s=638; continue;
      }
      case 638: switch(this.l()) {
        case '.': this.gc(0,'isDotForPath') && this.c(639); continue;
        default: this.gr(['*','+','-','/','<','=','>','?','!=','<=','<>','>=','in','is','or','||','and','not','like','between']); continue;
      }
      case 639: if(this.miA(640,'ref')) { $.expr.path.push( pathItem = this.identAst() ); } continue;
      case 640: switch(this.l()) {
        case '(': case '[': if(this.argumentsAndFilter({pathStep:pathItem},638)) { pathItem = null; } continue;
        default: this.s=638; continue;
      }
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  expression($,$next,$startState) {
    $.expr??=undefined;
    this.rule_($startState??642,$next);
    let e; let open; let _;
    for(;;) switch(this.s) {
      case 642: switch(this.lk()) {
        case '(': this.expressionOrQueryParens($,643); continue;
        case '#': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'QuotedLiteral': this.literalValue($,653); continue;
        case ':': if(this.c(644)) { this.reportUnexpectedSpace(); } continue;
        case '?': if(this.c(653)) { this.csnParseOnly( 'syntax-unsupported-param', -1, { '#': 'dynamic', code: '?' } );
$.expr = this.attachLocation({ param: this.valueWithLocation(), scope: 'param' }); } continue;
        case 'Id': if(this.valuePath(_={},646)) {e=_.expr; $.expr = this.valuePathAst( e ); } continue;
        case 'new': this.lP() && this.newAndValuePath($,653); continue;
        case 'exists': if(this.ck(649)) { $.expr = this.applyOpToken(); } continue;
        case 'case': this.caseExpression($,653); continue;
        case 'cast': this.castFunction($,653); continue;
        case '+': case '-': if(this.ep(30,'right') && this.c(652)) { $.expr = this.applyOpToken(); } continue;
        case 'not': if(this.ep(8,'right') && this.ck(652)) { $.expr = this.applyOpToken(); } continue;
        default: this.ei(); continue;
      }
      case 643: this.s=653;{ $.expr = this.taggedIfQuery( $.expr ); } continue;
      case 644: switch(this.l()) {
        case 'Id': if(this.ciA(645,'paramref')) { $.expr = { path: [ this.identAst() ], location: this.startLocation(), scope: 'param' }; } continue;
        case 'Number': if(this.c(653)) { this.csnParseOnly( 'syntax-unsupported-param', -1, { '#': 'positional', code: ':' + this.lb().text } );
$.expr = this.attachLocation({ param: this.unsignedIntegerLiteral(), scope: 'param' }); } continue;
        default: this.e(); continue;
      }
      case 645: switch(this.l()) {
        case '.': if(this.gc(653,'isDotForPath') && this.valuePath($,653,638)) { $.expr = this.valuePathAst( $.expr ); } continue;
        default: this.s=653;{ this.attachLocation( $.expr ); } continue;
      }
      case 646: switch(this.lk()) {
        case 'over': if(this.ckP(647,['('])) { this.pushXprToken( $.expr.suffix = [] ); } continue;
        default: this.s=648; continue;
      }
      case 647: this.overClause(e={outer:$.expr.suffix},648); continue;
      case 648: this.s=653;{ this.attachLocation( $.expr ); } continue;
      case 649: switch(this.l()) {
        case '(': if(this.c(650)) open=this.lb(); continue;
        case 'Id': if(this.valuePath(_={},653)) {e=_.expr; e = this.valuePathAst( e ); e.$expected = 'exists';
$.expr.args.push( e ); this.attachLocation( $.expr ); } continue;
        case '?': if(this.c(653)) { this.csnParseOnly( 'syntax-unsupported-param', -1, { '#': 'dynamic', code: '?' } );
$.expr.args.push( { param: this.valueWithLocation(), scope: 'param' } ); this.attachLocation( $.expr ); } continue;
        default: this.e(); continue;
      }
      case 650: if(this.queryExpression(_={},651)) e=_.expr; continue;
      case 651: if(this.m(653,')')) { $.expr.args.push( this.taggedIfQuery( this.surroundByParens( e, open ) ) );
this.attachLocation( $.expr ); } continue;
      case 652: if(this.expression(_={},653)) {e=_.expr; $.expr = this.signedExpression( $.expr, e ); } continue;
      case 653: switch(this.lk()) {
        case '*': case '/': if(this.gp(0,24) && this.c(657)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case '+': case '-': if(this.gp(0,22) && this.c(657)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case '||': if(this.gp(0,20) && this.c(657)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case 'and': if(this.lP(['Id','#','(','+','-',':','?','not','case','cast','null','true','false','Number','String','exists','QuotedLiteral']) && this.gp(0,4) && this.ck(657)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case 'or': if(this.lP(['Id','#','(','+','-',':','?','not','case','cast','null','true','false','Number','String','exists','QuotedLiteral']) && this.gp(0,2) && this.ck(657)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case '?': if(this.gp(0,0) && this.c(654)) { $.expr = this.applyOpToken( $.expr, '?:' ); } continue;
        case '<': case '=': case '>': case '!=': case '<=': case '<>': case '>=': if(this.gp(0,10,'none') && this.c(656)) { $.expr = this.applyOpToken( $.expr ); } continue;
        case 'is': if(this.lP(['not','null']) && this.gp(0,10,'none') && this.ck(658)) { $.expr = this.applyOpToken( $.expr ); } continue;
        case 'not': if(this.gc(0,'isNegatedRelation') && this.ck(660)) { $.expr = this.applyOpToken( $.expr ); } continue;
        case 'in': case 'like': case 'between': if(this.lP() && this.gp(0,10,'none') && this.g(660)) { $.expr = { op: { val: 'ixpr', location: this.la().location }, args: [ $.expr ] }; } continue;
        default: this.gr([]); continue;
      }
      case 654: if(this.expression(_={},655)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 655: if(this.m(657,':')) { this.pushXprToken( $.expr ); } continue;
      case 656: switch(this.lk()) {
        case 'all': case 'any': case 'some': if(this.ck(657)) { this.pushXprToken( $.expr ); } continue;
        default: this.s=657; continue;
      }
      case 657: if(this.expression(_={},668)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 658: switch(this.lk()) {
        case 'not': if(this.ck(659)) { this.pushXprToken( $.expr ); } continue;
        default: this.s=659; continue;
      }
      case 659: if(this.mk(668,'null')) { this.pushXprToken( $.expr ); } continue;
      case 660: switch(this.lk()) {
        case 'between': if(this.ck(661)) { this.pushXprToken( $.expr ); } continue;
        case 'in': if(this.ck(664)) { this.pushXprToken( $.expr ); } continue;
        case 'like': if(this.ck(665)) { this.pushXprToken( $.expr ); } continue;
        default: this.e(); continue;
      }
      case 661: if(this.expression(_={},662)) {e=_.expr; $.expr.args?.push( e ); } continue;
      case 662: if(this.mk(663,'and')) { this.pushXprToken( $.expr ); } continue;
      case 663: if(this.expression(_={},668)) {e=_.expr; $.expr.args?.push( e ); } continue;
      case 664: if(this.expression(_={},668)) {e=_.expr; $.expr.args?.push( this.secureParens( e ) ); } continue;
      case 665: if(this.expression(_={},666)) {e=_.expr; $.expr.args?.push( e ); } continue;
      case 666: switch(this.lk()) {
        case 'escape': if(this.ckP(667,['Id','#','(','+','-',':','?','not','case','cast','null','true','false','Number','String','exists','QuotedLiteral'])) { this.pushXprToken( $.expr ); } continue;
        default: this.s=668; continue;
      }
      case 667: if(this.expression(_={},668)) {e=_.expr; $.expr.args?.push( e ); } continue;
      case 668: this.s=653;{ this.attachLocation( $.expr ); } continue;
      default: return this.exit_();
    }
  }
  expressionOrQueryParens($,$next) {
    $.expr??=undefined;
    this.rule_(670,$next);
    for(;;) switch(this.s) {
      case 670: this.m(671,'('); continue;
      case 671: switch(this.lk()) {
        case '(': this.expressionOrQueryParens($,672); continue;
        case 'Id': case '#': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': this.ep(-2) && this.expression($,674); continue;
        case 'select': this.ep(-1) && this.queryExpression($,675); continue;
        default: this.ei(); continue;
      }
      case 672: switch(this.lk()) {
        case '*': case '+': case '-': case '/': case '<': case '=': case '>': case '?': case '!=': case '<=': case '<>': case '>=': case 'in': case 'is': case 'or': case '||': case 'and': case 'not': case 'like': case 'between': this.gp(675,-2,'post') && this.expression($,673,643); continue;
        case ',': this.gp(675,-2,'post') && this.continueExpressionslist($,675); continue;
        case 'limit': case 'minus': case 'order': case 'union': case 'except': case 'intersect': this.gp(675,-1,'post') && this.queryExpression($,675,462); continue;
        default: this.s=675; continue;
      }
      case 673: switch(this.l()) {
        case ',': this.continueExpressionslist($,675); continue;
        default: this.s=675; continue;
      }
      case 674: switch(this.l()) {
        case ',': this.continueExpressionslist($,675); continue;
        default: this.s=675; continue;
      }
      case 675: if(this.m(0,')')) {this.setPrecInCallingRule(); this.surroundByParens( $.expr ); } continue;
      default: return this.exit_();
    }
  }
  continueExpressionslist($,$next) {
    this.rule_(677,$next);
    let e; let _;
    for(;;) switch(this.s) {
      case 677: if(this.m(678,',')) { $.expr = { op: this.valueWithLocation( 'list' ), args: [ $.expr ], location: { ... $.expr.$parens?.at( -1 ) ?? $.expr.location } }; } continue;
      case 678: switch(this.lk()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': this.s=679; continue;
        default: this.ei(); continue;
      }
      case 679: switch(this.lk()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': if(this.expression(_={},680)) {e=_.expr; $.expr.args.push( e ); } continue;
        default: this.gi(0,[')']); continue;
      }
      case 680: switch(this.l()) {
        case ',': this.c(679); continue;
        default: this.gr([')']); continue;
      }
      case 0: { this.attachLocation( $.expr ); }
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  newAndValuePath($,$next) {
    $.expr??=undefined;
    this.rule_(682,$next);
    let e; let _;
    for(;;) switch(this.s) {
      case 682: if(this.mk(683,'new')) { $.expr = this.applyOpToken(); } continue;
      case 683: if(this.valuePath(_={},0)) {e=_.expr; e = this.valuePathAst( e );
if (e.op?.val !== 'ixpr') $.expr.args.push( e ); else $.expr.args.push( ...e.args ); } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  caseExpression($,$next) {
    $.expr??={ op: { val: 'ixpr' }, args: [] };
    this.rule_(685,$next);
    let e; let _;
    for(;;) switch(this.s) {
      case 685: if(this.mk(686,'case')) { this.pushXprToken( $.expr ); $.expr.op.location = $.expr.args[0].location; } continue;
      case 686: switch(this.lk()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': if(this.expression(_={},687)) {e=_.expr; $.expr.args.push( e ); } continue;
        case 'when': this.gP(687); continue;
        default: this.gi(687); continue;
      }
      case 687: switch(this.lk()) {
        case 'when': this.s=688; continue;
        default: this.e(); continue;
      }
      case 688: switch(this.lk()) {
        case 'when': if(this.ck(689)) { this.pushXprToken( $.expr ); } continue;
        default: this.s=692; continue;
      }
      case 689: if(this.expression(_={},690)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 690: if(this.mk(691,'then')) { this.pushXprToken( $.expr ); } continue;
      case 691: if(this.expression(_={},688)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 692: switch(this.lk()) {
        case 'else': if(this.ck(693)) { this.pushXprToken( $.expr ); } continue;
        default: this.s=694; continue;
      }
      case 693: if(this.expression(_={},694)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 694: if(this.mk(0,'end')) { this.pushXprToken( $.expr ); } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  castFunction($,$next) {
    $.expr??={};
    this.rule_(696,$next);
    let arg; let _;
    for(;;) switch(this.s) {
      case 696: if(this.mk(697,'cast')) { $.expr.op = this.valueWithLocation(); } continue;
      case 697: if(this.m(698,'(')) { $.expr.args = this.createArray(); } continue;
      case 698: if(this.expression(_={},699)) {arg=_.expr; $.expr.args?.push( arg ); } continue;
      case 699: this.mk(700,'as'); continue;
      case 700: this.typeRefOptArgs({art:$.expr},701); continue;
      case 701: if(this.m(0,')')) { this.finalizeDictOrArray( $.expr.args ); } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  argumentsAndFilter($,$next) {
    this.rule_(703,$next);
    let open; let expr; let id; let _;
    for(;;) switch(this.s) {
      case 703: switch(this.l()) {
        case '(': if(this.c(704)) {open=this.lb();this.prepareSpecialFunction(); $.pathStep.args = this.createArray(); } continue;
        default: this.s=723; continue;
      }
      case 704: switch(this.l()) {
        case 'Id': if(this.gc(705,'isNamedArg') && this.ciA(711,'paramname')) id=this.lb(); continue;
        default: this.s=705;{ ; } continue;
      }
      case 705: switch(this.l()) {
        case 'Id': case '#': case '(': case '*': case '+': case '-': case ':': case '?': case 'Id_all': case 'Number': case 'String': case 'QuotedLiteral': if(this.funcExpression(_={},706)) {expr=_.expr; $.pathStep.args.push( expr ); } continue;
        default: this.s=722; continue;
      }
      case 706: switch(this.l()) {
        case ',': if(this.c(707)) {this.nextFunctionArgument();} continue;
        default: this.s=708; continue;
      }
      case 707: switch(this.lk()) {
        case 'Id': case '#': case '(': case '*': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Id_all': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': if(this.funcExpression(_={},706)) {expr=_.expr; $.pathStep.args.push( expr ); } continue;
        case ')': case 'order': this.gP(708); continue;
        default: this.ei(); continue;
      }
      case 708: switch(this.lk()) {
        case 'order': if(this.ck(709)) { expr = $.pathStep.args[$.pathStep.args.length - 1] = this.applyOpToken( expr ); } continue;
        default: this.s=722; continue;
      }
      case 709: if(this.mk(710,'by')) { this.pushXprToken( expr ); } continue;
      case 710: if(this.orderByClauseAsXpr({outer:expr.args},722)) { this.attachLocation( expr ); } continue;
      case 711: switch(this.l()) {
        case ':': if(this.c(712)) { $.pathStep.args = this.createDict( open ); $.pathStep.$syntax = ':'; } continue;
        case '=>': if(this.c(717)) { $.pathStep.args = this.createDict(); } continue;
        default: this.e(); continue;
      }
      case 712: if(this.expression(_={},713)) {expr=_.expr; this.addNamedArg( $.pathStep, id, expr ); } continue;
      case 713: switch(this.l()) {
        case ',': this.c(714); continue;
        default: this.s=722; continue;
      }
      case 714: switch(this.l()) {
        case 'Id': if(this.ciA(715,'paramname')) id=this.lb(); continue;
        case ')': this.s=722; continue;
        default: this.e(); continue;
      }
      case 715: this.m(716,':'); continue;
      case 716: if(this.expression(_={},713)) {expr=_.expr; this.addNamedArg( $.pathStep, id, expr ); } continue;
      case 717: if(this.expression(_={},718)) {expr=_.expr; this.addNamedArg( $.pathStep, id, expr ); } continue;
      case 718: switch(this.l()) {
        case ',': this.c(719); continue;
        default: this.s=722; continue;
      }
      case 719: switch(this.l()) {
        case 'Id': if(this.ciA(720,'paramname')) id=this.lb(); continue;
        case ')': this.s=722; continue;
        default: this.e(); continue;
      }
      case 720: this.m(721,'=>'); continue;
      case 721: if(this.expression(_={},718)) {expr=_.expr; this.addNamedArg( $.pathStep, id, expr ); } continue;
      case 722: this.m(723,')'); continue;
      case 723: switch(this.l()) {
        case '[': this.cardinalityAndFilter($,0); continue;
        default: this.gr(['*','+','-','.','/','<','=','>','?','!=','<=','<>','>=','in','is','or','||','and','not','like','between']); continue;
      }
      default: return this.exit_();
    }
  }
  funcExpression($,$next) {
    $.expr??=undefined;
    this.rule_(725,$next);
    let args;
    let tok; let e; let _;
    for(;;) switch(this.s) {
      case 725: switch(this.lGenericIntroOrExpr()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'Number': case 'String': case 'QuotedLiteral': if(this.expression(_={},727)) $.expr=_.expr; continue;
        case 'GenericExpr': if(this.ckA(727)) {tok=this.lb(); $.expr = { val: tok.keyword ?? tok.type, location: tok.location, literal: 'token' }; } continue;
        case 'GenericIntro': if(this.ckA(726)) { $.expr = this.applyOpToken(); args = $.expr.args; } continue;
        default: this.e(); continue;
      }
      case 726: if(this.expression(_={},727)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 727: switch(this.lGenericSeparator()) {
        case 'GenericSeparator': if(this.ckA(728)) { if (args) this.pushXprToken( args ); else { $.expr= this.applyOpToken( $.expr ); args = $.expr.args; } } continue;
        default: this.gr([')',',','order']); continue;
      }
      case 728: switch(this.lGenericExpr()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'Number': case 'String': case 'QuotedLiteral': if(this.expression(_={},727)) {e=_.expr; args.push( e ); } continue;
        case 'GenericExpr': if(this.ckA(727)) { this.pushXprToken( args ); } continue;
        default: this.e(); continue;
      }
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  overClause($,$next) {
    this.rule_(730,$next);
    let over=[];
    for(;;) switch(this.s) {
      case 730: this.m(731,'('); continue;
      case 731: switch(this.lk()) {
        case 'partition': if(this.ck(732)) { this.pushXprToken( over ); } continue;
        default: this.s=734; continue;
      }
      case 732: if(this.mk(733,'by')) { this.pushXprToken( over ); } continue;
      case 733: this.expressionsAsXpr({outer:over},734); continue;
      case 734: switch(this.lk()) {
        case 'order': if(this.ck(735)) { this.pushXprToken( over ); } continue;
        default: this.s=737; continue;
      }
      case 735: if(this.mk(736,'by')) { this.pushXprToken( over ); } continue;
      case 736: this.orderByClauseAsXpr({outer:over},737); continue;
      case 737: switch(this.lk()) {
        case 'rows': if(this.ck(738)) { this.pushXprToken( over ); } continue;
        default: this.s=739; continue;
      }
      case 738: this.windowFrameClause({outer:over},739); continue;
      case 739: this.m(0,')'); continue;
      default:
      $.outer.push( this.surroundByParens( this.ixprAst( over ) ) );
      return this.exit_();
    }
  }
  expressionsAsXpr($,$next) {
    this.rule_(741,$next);
    let args=[];
    let expr; let _;
    for(;;) switch(this.s) {
      case 741: if(this.expression(_={},742)) {expr=_.expr; args.push( expr ); } continue;
      case 742: switch(this.l()) {
        case ',': if(this.c(743)) { this.pushXprToken( args ); } continue;
        default: this.gr([')','rows','order']); continue;
      }
      case 743: if(this.expression(_={},742)) {expr=_.expr; args.push( expr ); } continue;
      default:
      $.outer.push( this.ixprAst( args ) );
      return this.exit_();
    }
  }
  orderByClauseAsXpr($,$next) {
    this.rule_(745,$next);
    let args=[];
    for(;;) switch(this.s) {
      case 745: this.orderBySpecAsXpr({args},746); continue;
      case 746: switch(this.l()) {
        case ',': if(this.c(747)) { this.pushXprToken( args ); } continue;
        default: this.gr([')']); continue;
      }
      case 747: this.orderBySpecAsXpr({args},746); continue;
      default:
      $.outer.push( this.ixprAst( args ) );
      return this.exit_();
    }
  }
  orderBySpecAsXpr($,$next) {
    this.rule_(749,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 749: if(this.expression(_={},750)) {expr=_.expr; $.args.push( expr ); } continue;
      case 750: switch(this.lk()) {
        case 'asc': case 'desc': if(this.ck(751)) { this.pushXprToken( $.args ); } continue;
        default: this.s=751; continue;
      }
      case 751: switch(this.lk()) {
        case 'nulls': if(this.ck(752)) { this.pushXprToken( $.args ); } continue;
        default: this.gr([')',',']); continue;
      }
      case 752: switch(this.lk()) {
        case 'last': case 'first': if(this.ck(0)) { this.pushXprToken( $.args ); } continue;
        default: this.e(); continue;
      }
      default: return this.exit_();
    }
  }
  windowFrameClause($,$next) {
    this.rule_(754,$next);
    let args=[];
    for(;;) switch(this.s) {
      case 754: switch(this.lk()) {
        case 'unbounded': if(this.ck(755)) { this.pushXprToken( args ); } continue;
        case 'Number': if(this.c(755)) { args.push( this.unsignedIntegerLiteral() ); } continue;
        case 'current': if(this.ck(756)) { this.pushXprToken( args ); } continue;
        case 'between': if(this.ck(757)) { this.pushXprToken( args ); } continue;
        default: this.e(); continue;
      }
      case 755: if(this.mk(0,'preceding')) { this.pushXprToken( args ); } continue;
      case 756: if(this.mk(0,'row')) { this.pushXprToken( args ); } continue;
      case 757: this.windowFrameBoundSpec({args},758); continue;
      case 758: if(this.mk(759,'and')) { this.pushXprToken( args ); } continue;
      case 759: this.windowFrameBoundSpec({args},0); continue;
      default:
      $.outer.push( this.ixprAst( args ) );
      return this.exit_();
    }
  }
  windowFrameBoundSpec($,$next) {
    this.rule_(761,$next);
    for(;;) switch(this.s) {
      case 761: switch(this.lk()) {
        case 'unbounded': if(this.ck(762)) { this.pushXprToken( $.args ); } continue;
        case 'Number': if(this.c(762)) { $.args.push( this.unsignedIntegerLiteral() ); } continue;
        case 'current': if(this.ck(764)) { this.pushXprToken( $.args ); } continue;
        default: this.e(); continue;
      }
      case 762: switch(this.lk()) {
        case 'following': this.ck(763); continue;
        case 'preceding': this.ck(763); continue;
        default: this.e(); continue;
      }
      case 763: if(this.gr([])) { this.pushXprToken( $.args ); } continue;
      case 764: if(this.mk(0,'row')) { this.pushXprToken( $.args ); } continue;
      default: return this.exit_();
    }
  }
  literalValue($,$next) {
    $.expr??={};
    this.rule_(766,$next);
    for(;;) switch(this.s) {
      case 766: switch(this.lk()) {
        case '#': if(this.c(767)) { this.reportUnexpectedSpace(); } continue;
        case 'null': if(this.ck(0)) { $.expr = { literal: 'null', val: null }; } continue;
        case 'true': case 'false': if(this.ck(0)) { $.expr = { literal: 'boolean', val: this.lb().keyword === 'true' }; } continue;
        case 'Number': if(this.c(0)) { $.expr = this.numberLiteral(); } continue;
        case 'String': if(this.c(0)) { $.expr = this.quotedLiteral(); } continue;
        case 'QuotedLiteral': if(this.c(0)) { $.expr = this.quotedLiteral(); } continue;
        default: this.e(); continue;
      }
      case 767: if(this.mi(0,'enumref')) { $.expr = { literal: 'enum', sym: this.identAst() } } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  annoAssignStd($,$next) {
    this.rule_(769,$next);
    for(;;) switch(this.s) {
      case 769: if(this.m(770,'@')) {this.inSameLine(); this.reportUnexpectedSpace(); } continue;
      case 770: switch(this.l()) {
        case '(': this.annoAssignParen($,0); continue;
        case 'Id': this.annoAssignBase($,0); continue;
        default: this.e(); continue;
      }
      default:
      this.docComment( $.art );
      return this.exit_();
    }
  }
  annoAssignCol($,$next) {
    this.rule_(772,$next);
    for(;;) switch(this.s) {
      case 772: if(this.m(773,'@')) { this.reportUnexpectedSpace(); } continue;
      case 773: switch(this.l()) {
        case '(': this.annoAssignParen($,0); continue;
        case 'Id': this.annoAssignBase($,0); continue;
        default: this.e(); continue;
      }
      default:
      this.docComment( $.art );
      return this.exit_();
    }
  }
  annoAssignMid($,$next) {
    this.rule_(775,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 775: if(this.m(776,'@')) {this.inSameLine(); this.reportUnexpectedSpace(); } continue;
      case 776: switch(this.l()) {
        case '(': this.annoAssignParen($,0); continue;
        case 'Id': if(this.annoNamePath(_={category:'anno'},0)) {name=_.name; this.assignAnnotation( $.art, {}, name ); this.warnIfColonFollows( name ); } continue;
        default: this.e(); continue;
      }
      default:
      this.docComment( $.art );
      return this.exit_();
    }
  }
  annoAssignParen($,$next) {
    this.rule_(778,$next);
    for(;;) switch(this.s) {
      case 778: if(this.m(779,'(')) {this.inSameLine();} continue;
      case 779: switch(this.l()) {
        case 'Id': this.annoAssignBase({art:$.art},780); continue;
        default: this.s=781; continue;
      }
      case 780: switch(this.l()) {
        case ',': this.c(779); continue;
        case ')': this.s=781; continue;
        default: this.e(); continue;
      }
      case 781: this.m(0,')'); continue;
      default: return this.exit_();
    }
  }
  annoAssignBase($,$next) {
    this.rule_(783,$next);
    let value={};
    let name; let _;
    for(;;) switch(this.s) {
      case 783: if(this.annoNamePath(_={category:'anno'},784)) name=_.name; continue;
      case 784: switch(this.l()) {
        case ':': this.gc(0,'inSameLine') && this.c(785); continue;
        default: this.gr([]); continue;
      }
      case 785: if(this.annoValue(_={},0)) value=_.value; continue;
      default:
      this.assignAnnotation( $.art, value, name || {} );
      return this.exit_();
    }
  }
  annoNamePath($,$next) {
    $.name??=new XsnName();
    this.rule_(787,$next);
    let at;
    for(;;) switch(this.s) {
      case 787: if(this.miA(788,$.category)) { $.name.path = [ this.identAst() ]; } continue;
      case 788: switch(this.l()) {
        case '.': this.c(789); continue;
        default: this.s=791; continue;
      }
      case 789: switch(this.l()) {
        case 'Id': if(this.ciA(788,$.category)) { $.name.path.push( this.identAst() ); } continue;
        case '@': if(this.c(790)) at=this.lb(); continue;
        default: this.e(); continue;
      }
      case 790: if(this.miA(788,$.category)) { $.name.path.push( this.identAstWithPrefix( at ) ); } continue;
      case 791: switch(this.l()) {
        case '#': this.gc(0,'inSameLine') && this.annoPathVariant({nameOrRef:$.name},0); continue;
        default: this.gr([]); continue;
      }
      default:
      this.attachLocation( $.name );
      return this.exit_();
    }
  }
  annoPath($,$next) {
    this.rule_(793,$next);
    let at;
    for(;;) switch(this.s) {
      case 793: switch(this.l()) {
        case 'Id': if(this.ciA(795,$.category)) { $.nameOrRef.path = [ this.identAst() ]; } continue;
        case '@': if(this.c(794)) at=this.lb(); continue;
        default: this.e(); continue;
      }
      case 794: if(this.miA(795,$.category)) { $.nameOrRef.path = [ this.identAstWithPrefix( at ) ]; } continue;
      case 795: switch(this.l()) {
        case '.': this.c(796); continue;
        default: this.s=798; continue;
      }
      case 796: switch(this.l()) {
        case 'Id': if(this.ciA(795,$.category)) { $.nameOrRef.path.push( this.identAst() ); } continue;
        case '@': if(this.c(797)) at=this.lb(); continue;
        default: this.e(); continue;
      }
      case 797: if(this.miA(795,$.category)) { $.nameOrRef.path.push( this.identAstWithPrefix( at ) ); } continue;
      case 798: switch(this.l()) {
        case '#': this.annoPathVariant({nameOrRef:$.nameOrRef},0); continue;
        default: this.gr([]); continue;
      }
      default:
      this.attachLocation( $.nameOrRef );
      return this.exit_();
    }
  }
  annoPathVariant($,$next) {
    this.rule_(800,$next);
    for(;;) switch(this.s) {
      case 800: if(this.m(801,'#')) { this.reportUnexpectedSpace(); } continue;
      case 801: if(this.miA(802,'variant')) { $.nameOrRef.variant = { path: [ this.identAst() ] }; } continue;
      case 802: switch(this.l()) {
        case '.': this.c(803); continue;
        default: this.gr([]); continue;
      }
      case 803: if(this.miA(802,'variant')) { $.nameOrRef.variant.path.push( this.identAst() ); } continue;
      default:
      this.attachLocation( $.nameOrRef.variant );
      return this.exit_();
    }
  }
  annoStructValue($,$next) {
    $.value??={};
    this.rule_(805,$next);
    let name=new XsnName();
    let _;
    for(;;) switch(this.s) {
      case 805: if(this.annoPath({nameOrRef:name,category:'name'},806)) { this.attachLocation( name ); } continue;
      case 806: switch(this.l()) {
        case ':': if(this.c(807)) {this.annoTopValue();} continue;
        default: if(this.gr([',','}'])) { this.attachLocation( $.value ); } continue;
      }
      case 807: if(this.annoValue(_={},0)) $.value=_.value; continue;
      default:
      $.value.name = name;
      return this.exit_();
    }
  }
  annoValue($,$next) {
    $.value??={};
    this.rule_(809,$next);
    let sign; let sub; let ellipsis; let upTo; let _;
    for(;;) switch(this.s) {
      case 809: switch(this.lk()) {
        case '#': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'QuotedLiteral': if(this.literalValue(_={},0)) {$.value=_.expr; this.adjustAnnoNumber( $.value ); } continue;
        case '+': case '-': if(this.c(810)) sign=this.lb(); continue;
        case 'Id': case '@': this.annoPath({nameOrRef:$.value,category:'annoref'},0); continue;
        case '{': if(this.c(811)) {this.annoTopValue(); if (this.annoTopValue(true)) $.value.$flatten = [];
else { $.value.struct = Object.create(null); $.value.literal = 'struct'; } } continue;
        case '[': if(this.c(814)) {this.annoTopValue(); $.value.val = []; $.value.literal = 'array' } continue;
        case '(': this.c(821); continue;
        default: this.ei(); continue;
      }
      case 810: if(this.m(0,'Number')) { this.adjustAnnoNumber( $.value = this.numberLiteral( sign ) ); } continue;
      case 811: switch(this.l()) {
        case 'Id': case '@': if(this.annoStructValue(_={},812)) {sub=_.value; if ($.value.$flatten) $.value.$flatten.push( sub );
else this.addDef( sub, $.value, 'struct', null, sub.name ); } continue;
        default: this.s=813; continue;
      }
      case 812: switch(this.l()) {
        case ',': this.c(811); continue;
        case '}': this.s=813; continue;
        default: this.e(); continue;
      }
      case 813: this.m(0,'}'); continue;
      case 814: switch(this.l()) {
        case 'Id': case '#': case '(': case '+': case '-': case '@': case '[': case '{': case 'Number': case 'String': case 'QuotedLiteral': if(this.annoValue(_={},819)) {sub=_.value; $.value.val.push( sub ) } continue;
        case '...': if(this.c(815)) ellipsis=this.lb(); continue;
        default: this.s=820; continue;
      }
      case 815: switch(this.lk()) {
        case 'up': this.ck(816); continue;
        default: this.s=818;{ upTo = undefined; } continue;
      }
      case 816: this.mk(817,'to'); continue;
      case 817: if(this.annoValue(_={},818)) upTo=_.value; continue;
      case 818: this.s=819;{ $.value.val.push( { literal: 'token', val: '...', location: ellipsis.location, upTo: upTo } ); } continue;
      case 819: switch(this.l()) {
        case ',': this.c(814); continue;
        case ']': this.s=820; continue;
        default: this.e(); continue;
      }
      case 820: this.m(0,']'); continue;
      case 821: if(this.condition(_={},822)) $.value=_.expr; continue;
      case 822: if(this.m(0,')')) { $.value.$tokenTexts = this.ruleTokensText(); } continue;
      default:
      this.attachLocation( $.value );
      return this.exit_();
    }
  }
}
module.exports = CdlParser;
