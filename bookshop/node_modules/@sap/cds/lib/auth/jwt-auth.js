const cds = require('../')
const LOG = cds.log('auth')

// _require for better error message
const _require = require('../../libx/_runtime/common/utils/require')

let xssec = _require('@sap/xssec')
// use v3 compat api
if (xssec.v3) xssec = xssec.v3

module.exports = function jwt_auth(config) {
  const { kind, credentials } = config

  if (!credentials) {
    let msg = `Authentication kind "${kind}" configured, but no XSUAA instance bound to application.`
    msg += ' Either bind an XSUAA instance, or switch to an authentication kind that does not require a binding.'
    throw new Error(msg)
  }

  function getUser(tokenInfo) {
    const payload = tokenInfo.getPayload()

    let id = payload.user_name

    // Roles = scope names w/o xsappname
    const xsappname = new RegExp(`^${credentials.xsappname}\\.`)
    let roles = payload.scope.map(s => s.replace(xsappname, ''))

    // Disallow setting system roles from external
    roles = roles.filter(r => !(r in { 'internal-user': 1, 'system-user': 1 }))

    if (payload.grant_type in { client_credentials: 1, client_x509: 1 }) {
      id = 'system'
      roles.push('system-user')
      if (tokenInfo.getClientId() === credentials.clientid) roles.push('internal-user')
    }

    const attr = Object.assign({}, payload['xs.user.attributes'])
    if (kind === 'xsuaa') {
      attr.logonName = payload.user_name
      attr.givenName = payload.given_name
      attr.familyName = payload.family_name
      attr.email = payload.email
    }

    return new cds.User({ id, roles, attr, tokenInfo })
  }

  return (req, _, next) => {
    if (!req.headers.authorization) return next()

    const token = req.headers.authorization.split(/^bearer /i)[1]
    xssec.createSecurityContext(token, credentials, function (err, securityContext, tokenInfo) {
      if (err) LOG.error('User could not be authenticated due to error:', err)

      if (!securityContext) return next(new cds.error('Unauthorized', { code: 401, statusCode: 401 }))

      const ctx = cds.context
      ctx.user = getUser(tokenInfo)
      ctx.tenant = tokenInfo.getZoneId()

      req.authInfo = securityContext //> compat req.authInfo

      next()
    })
  }
}
