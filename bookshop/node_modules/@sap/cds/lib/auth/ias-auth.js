const cds = require('../')
const LOG = cds.log('auth')

// _require for better error message
const _require = require('../../libx/_runtime/common/utils/require')

let xssec = _require('@sap/xssec')
// use v3 compat api
if (xssec.v3) xssec = xssec.v3

module.exports = function ias_auth(config) {
  const { kind, credentials, known_claims } = config

  if (!credentials) {
    let msg = `Authentication kind "${kind}" configured, but no IAS instance bound to application.`
    msg += ' Either bind an IAS instance, or switch to an authentication kind that does not require a binding.'
    throw new Error(msg)
  }

  // cds.env.requires.auth.known_claims is not an official config!
  const KNOWN_CLAIMS = new Set(known_claims || require('./ias-claims'))

  function getUser(tokenInfo) {
    const payload = tokenInfo.getPayload()

    const clientid = tokenInfo.getClientId()
    if (clientid === payload.sub) {
      //> grant_type === client_credentials or x509
      const roles = ['system-user']
      if (clientid === credentials.clientid) roles.push('internal-user')
      return new cds.User({ id: 'system', roles, tokenInfo })
    }

    // add all unknown attributes to req.user.attr in order to keep public API small
    const attr = Object.keys(payload)
      .filter(k => !KNOWN_CLAIMS.has(k))
      .reduce((attr, k) => { attr[k] = payload[k]; return attr }, {})

    // same api as xsuaa-auth for easier migration
    if (attr.user_name) attr.logonName = attr.user_name
    if (attr.given_name) attr.givenName = attr.given_name
    if (attr.family_name) attr.familyName = attr.family_name

    return new cds.User({ id: payload.sub, attr, tokenInfo })
  }

  return (req, _, next) => {
    if (!req.headers.authorization) return next()

    const token = req.headers.authorization?.split(/^bearer /i)[1]
    xssec.createSecurityContext(token, credentials, 'IAS', function (err, securityContext, tokenInfo) {
      if (err) LOG.error('User could not be authenticated due to error:', err)

      if (!securityContext) return next(new cds.error('Unauthorized', { code: 401 }))

      const ctx = cds.context
      ctx.user = getUser(tokenInfo)
      ctx.tenant = tokenInfo.getZoneId()

      req.authInfo = securityContext //> compat req.authInfo

      next()
    })
  }
}
