const cds = require('../../_runtime/cds')

/*

// requesting logger without module on purpose!
const LOG = cds.log()

let _i18n
const i18n = (...args) => {
  if (!_i18n) _i18n = require('../../_runtime/common/i18n')
  return _i18n(...args)
}

const { normalizeError, isClientError } = require('../../_runtime/common/error/frontend')

const _log = err => {
  // REVISIT: how does level behave compared to _log in (legacy) odata adapter?
  const level = isClientError(err) ? 'warn' : 'error'
  if ((level === 'warn' && !LOG._warn) || (level === 'error' && !LOG._error)) return

  // replace messages in toLog with developer texts (i.e., undefined locale)
  const _message = err.message
  const _details = err.details
  err.message = i18n(err.message || err.code, undefined, err.args) || err.message
  if (err.details) {
    const details = []
    for (const d of err.details) {
      details.push(Object.assign({}, d, { message: i18n(d.message || d.code, undefined, d.args) || d.message }))
    }
    err.details = details
  }

  // log it
  LOG[level](err)

  // restore
  err.message = _message
  if (_details) err.details = _details
}

*/

const _log = require('../../_runtime/common/error/log')

const { normalizeError } = require('../../_runtime/common/error/frontend')

function noop_error_middleware(err, req, res, next) {
  next(err)
}

module.exports = () => {
  // REVISIT: unofficial hack for afc!!!
  if (cds.env.features.rest_error_handler === false) return noop_error_middleware

  return function rest_error(err, req, res, next) {
    if (err == 401 || err.code == 401) return next(err) // speed up logins, at least temporary until we reviewed and eliminated overhead that may be involved below

    // REVISIT: keep?
    // log the error (4xx -> warn)
    _log(err)

    const { error, statusCode } = normalizeError(err, req)

    // NOTE: express also looks for numbers in err.status or err.statusCode
    error.statusCode = statusCode

    next(error)
  }
}
