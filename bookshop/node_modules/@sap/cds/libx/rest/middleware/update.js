const cds = require('../../_runtime/cds')

const UPSERT_ALLOWED = !(cds.env.runtime && cds.env.runtime.allow_upsert === false)

module.exports = adapter => {
  const { router, service } = adapter

  return async function update(req, res, next) {
    let { _query: query, _data: data, _params: params } = req

    let result,
      status = 200

    // if upsert it allowed, we need to catch 404 and retry with create
    try {
      query.data(data)
      // REVISIT: if PUT, req.method should be PUT -> Crud2Http maps UPSERT to PUT
      result = await service.dispatch(adapter.request4({ query, method: req.method, params, req, res }))
    } catch (e) {
      const is404 = e.code === 404 || e.status === 404 || e.statusCode === 404
      const isForcedInsert =
        (e.code === 412 || e.status === 412 || e.statusCode === 412) && req.headers['if-none-match'] === '*'
      if ((is404 || isForcedInsert) && UPSERT_ALLOWED) {
        // -> redirect to POST
        const _body = JSON.parse(req._raw)
        const _req = Object.assign(Object.create(req), { method: 'POST', body: _body })
        return router.handle(_req, res, next)
      }

      throw e
    }

    return { result, status }
  }
}
