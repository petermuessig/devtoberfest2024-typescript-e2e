const cds = require('../../../lib')

const _log = require('../../_runtime/common/error/log')

const { normalizeError, unwrapMultipleErrors } = require('../../_runtime/common/error/frontend')

module.exports = () => {
  return function odata_error(err, req, res, next) {
    if (err == 401 || err.code == 401) return next(err) // speed up logins, at least temporary until we reviewed and eliminated overhead that may be involved below

    // REVISIT: keep?
    // log the error (4xx -> warn)
    _log(err)

    const { error, statusCode } = normalizeError(err, req) // REVISIT: that's killing error objects and stacks -> get rid of it

    const content_id = req.headers['content-id']
    if (content_id) {
      error['@Core.ContentID'] = content_id
      error.details?.forEach(e => (e['@Core.ContentID'] = content_id))
    }

    if (error.details && cds.env.fiori.wrap_multiple_errors === false) {
      unwrapMultipleErrors(error)
    }

    // NOTE: express also looks for numbers in err.status or err.statusCode
    error.statusCode = statusCode
    // if (err.stack) Object.defineProperty (error, 'stack', { value: err.stack })
    // REVISIT: we can't do that ^^^^^ currently because the _http_common parsers we use for $batch requests can't handle that

    next(error)
  }
}
