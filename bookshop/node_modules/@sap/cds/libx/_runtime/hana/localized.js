const { ensureUnlocalized } = require('../common/utils/draft')
const { redirect } = require('../db/utils/localized')

const getLocalize = model => name => {
  if (name.endsWith('_drafts')) return name

  // if we get here via onReadDraft, the target is already localized
  // because of sub-request using SELECT.from as the new target
  const target = model.definitions[ensureUnlocalized(name)]
  const localizedView = target && target['@cds.localized'] !== false && model.definitions[`localized.${name}`]
  return localizedView ? localizedView.name : name
}

const localizedHandler = function (req) {
  const { query } = req

  // do simple checks upfront and exit early
  if (!query || typeof query === 'string') return
  if (!query.SELECT) return
  if (!this.model) return
  if (!req.locale) return

  // suppress localization by instruction
  if (query.SELECT.localized === false) return

  // suppress localization for pure counts
  const columns = query.SELECT.columns
  if (columns && columns.length === 1 && columns[0].func === 'count') return

  // suppress localization (no redirection to localized view) for queries that
  // lock the selected record (exclusive and shared locks)
  if (query.SELECT.forUpdate) return
  if (query.SELECT.forShareLock) return

  redirect(query, getLocalize(this.model))
}

localizedHandler._initial = true
module.exports = localizedHandler
