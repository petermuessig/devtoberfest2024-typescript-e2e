/*
 * additional input handler on ApplicationService level for PUT
 *
 * - add default value or null (if nullable) for each property that was not provided
 *   and is neither key nor read-only (e.g., managed, virtual, etc.)
 */

const cds = require('../../cds')
const getTemplate = require('../utils/template')
const { getDataFromCQN, setDataFromCQN } = require('../utils/data')

const _fillStructure = (row, parts, element, category, args) => {
  if (parts.length === 1) {
    if (row[parts[0]] === undefined) {
      row[parts[0]] = (args && args.val) || null
    }
  } else {
    if (row[parts[0]] === undefined) {
      row[parts[0]] = {}
    }
    _fillStructure(row[parts[0]], parts.slice(1), element, category, args)
  }
}

const _getProcessorFn = req => {
  const REST = req.protocol === 'rest'

  return ({ row, key, element, plain }) => {
    if (!row || row[key] !== undefined) return

    const { category, args } = plain

    // fills non-navigation structures if REST
    if (REST && element.name.match(/._./)) {
      const parts = element.name.split('_')
      if (!element.parent.elements[parts[0]]) {
        _fillStructure(row, parts, element, category, args)
        return
      }
    }

    if (category === 'default') {
      row[key] = args.val
    } else if (category === 'null' && !element._isStructured) {
      row[key] = null
    }
  }
}

const _pick = element => {
  if (!element.isAssociation && !element.key && !element._isReadOnly) {
    if (element.default) return { category: 'default', args: element.default }
    if (!element.notNull) return { category: 'null' }
  }
}

function commonGenericPut(req) {
  if (req.method !== 'PUT') return
  if (!req.query) return // FIXME: the code below expects req.query to be defined
  if (!req.target) return

  // not for payloads with stream properties
  const { elements } = req.target
  for (const k in req.data) if (k in elements && elements[k]['@Core.MediaType']) return

  const template = getTemplate('app-put', this, req.target, {
    pick: _pick,
    ignore: element => element._isAssociationStrict
  })
  if (template.elements.size === 0) return

  // REVISIT: req.data should point into req.query
  const data = getDataFromCQN(req.query)

  template.process(data, _getProcessorFn(req))

  // REVISIT: req.data should point into req.query
  setDataFromCQN(req)
}

commonGenericPut._initial = true

module.exports = cds.service.impl(function () {
  this.before(['UPDATE'], '*', commonGenericPut)
})
