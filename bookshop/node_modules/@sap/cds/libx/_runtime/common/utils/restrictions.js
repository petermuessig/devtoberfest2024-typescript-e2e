// CLEANUP: This is only used in our Okra-based stuff now -> should move over there
const cds = require('../../cds')

const $cache = Symbol('service contains any restrictions cache')

const containsAnyRestrictions = srv => {
  let { model } = srv
  if (srv.isExtensible) model = cds.context?.model || srv.model // REVISIT: extensions are not allowed to add or change restrictions, are they?

  if (!model[$cache]) model[$cache] = new Map() // REVIST: reuse model._cached instead of introducing a separate one
  const cache = model[$cache]

  if (cache.has(srv.name)) return cache.get(srv.name)

  cache.set(srv.name, false)

  const accessRestrictions = getAccessRestrictions(model.definitions[srv.definition.name])
  if (accessRestrictions.length > 1 || accessRestrictions[0] !== 'any') {
    cache.set(srv.name, true)
  } else {
    // REVISIT: Use srv.definiton.entities instead
    const entities = Object.keys(model.definitions).filter(k => {
      const d = model.definitions[k]
      return d.kind === 'entity' && d.name.startsWith(srv.definition.name + '.')
    })
    // REVISIT: Use srv.definiton.actions instead
    const operations = Object.keys(model.definitions).filter(k => {
      const d = model.definitions[k]
      return (d.kind === 'action' || d.kind === 'function') && d.name.startsWith(srv.definition.name + '.')
    })
    // REVISIT: @requires and @restrict on single entities or operations DOES NOT mean that all service is restricted !
    cache.set(
      srv.name,
      !!(
        entities.some(ek => model.definitions[ek]['@requires'] || model.definitions[ek]['@restrict']) ||
        entities.some(ek => {
          const actions = model.definitions[ek].actions
          actions && Object.keys(actions).some(action => actions[action]['@requires'] || actions[action]['@restrict'])
        }) ||
        operations.some(ok => model.definitions[ok]['@requires'] || model.definitions[ok]['@restrict'])
      )
    )
  }

  return cache.get(srv.name)
}

// REVISIT: this is the legacy variant of HttpAdapter.early_access_check4, isn't it?
const getAccessRestrictions = srv => {
  const srvDefinition = srv.definition || srv

  let restrictions = srvDefinition['@restrict'] || srvDefinition['@requires']
  if (restrictions) {
    if (typeof restrictions === 'string') return [restrictions]
    return restrictions.map(r => r.to || r).flat()
  } else {
    if (cds.env.requires.auth.restrict_all_services === false) return ['any']
    if (process.env.NODE_ENV !== 'production') return ['any']
    return ['authenticated-user']
  }
}

module.exports = {
  containsAnyRestrictions,
  getAccessRestrictions
}
