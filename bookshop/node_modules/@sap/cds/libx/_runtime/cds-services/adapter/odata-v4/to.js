const cds = require('../../../cds')
// prettier-ignore
const OkraAdapter = Object.assign (require('./OData'), {
  for (srv, model, edm) {
    return new this (edm, model, srv.options).addCDSServiceToChannel(srv)
  }
})

/**
 * This is the express handler for a specific OData endpoint.
 * Note: the same service can be served at different endpoints.
 */
// prettier-ignore
const adapter4 = module.exports = function (srv) {
  const csn = srv.model
  let okra, pre_compiled_edm = cds.compile.to.edmx.files.get (srv, 'edm.json', csn)
  if (pre_compiled_edm) okra = { // using a lazy-loading okra proxy
    process: (...args) => pre_compiled_edm.then (edm => {
      okra = OkraAdapter.for (srv, csn, edm) // replacing the proxy for subsequent calls
      return okra.process (...args)         // delegating the first call
    })
  }; else {
    let edm = cds.compile.to.edm (csn, { service: srv.definition?.name || srv.name })
    okra = OkraAdapter.for (srv, csn, edm)
  }
  return (...args) => okra.process (...args)
}

//////////////////////////////////////////////////////////////////////////////
//
//  REVISIT: Move to ExtensibilityService
//
if (cds.requires.extensibility || cds.requires.toggles) {
  /**
   * Creates new OkraAdapter for new models with tenant-specific extensions.
   * The created adapters are cached in `model._cache`.
   * Note: As the adapters cache is attached to the model, they get disposed
   * when models are evicted from the models cache.
   */
  module.exports = srv => {
    const id = `${++unique} - ${srv.path}` // REVISIT: this is to allow running multiple express apps serving same endpoints, as done by some questionable tests
    // prettier-ignore
    return function ODataAdapter(req, res) {
      const model = cds.context?.model || srv.model
      if (!model._cached) Object.defineProperty (model, '_cached', { value: { touched: Date.now() } })
      const adapters = model._cached._odata_adapters ??= {}
      const okra = adapters[id] ??= new adapter4 ({ __proto__: srv, _real_srv: srv, model })
      return okra (req, res)
    }
  }
  let unique = 0
}
