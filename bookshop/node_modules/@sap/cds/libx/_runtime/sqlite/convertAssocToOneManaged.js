const getError = require('../common/error')

function _convertRefForAssocToOneManaged(element, refEntry) {
  const maybeManagedKey = refEntry.ref.join('_')
  if (element._foreignKeys.find(key => key.parentElement && key.parentElement.name === maybeManagedKey)) {
    refEntry.ref = [maybeManagedKey]
  } else {
    throw getError(501, 'Path expressions in query options are not supported on SQLite')
  }
}

const _getConvertibleEntries = req => {
  const orders = req.query.SELECT.orderBy || []
  const groups = req.query.SELECT.groupBy || []
  const filters = req.query.SELECT.where || []
  const havings = req.query.SELECT.having || []
  return [...orders, ...groups, ...filters, ...havings]
}

const _convert = (refEntries, req) => {
  for (const refEntry of refEntries) {
    if (refEntry.xpr) {
      _convert(refEntry.xpr, req)
      continue
    }

    if (!refEntry.ref || refEntry.ref.length < 2) {
      // only check refs in format {ref: ['assoc', 'id']}
      continue
    }
    let element
    if (req.target.elements[refEntry.ref[0]]) {
      element = req.target.elements[refEntry.ref[0]]
    } else if (req.target.elements[refEntry.ref[1]]?.isAssociation) {
      // fallback: if first ref is not an element and second is an association, we assume first is an alias
      element = req.target.elements[refEntry.ref[1]]
    }

    if (!element || !element.is2one) return

    _convertRefForAssocToOneManaged(element, refEntry)
  }
}

// REVISIT once sql can handle structured keys properly, this handler should not be required anymore
const sqliteConvertAssocToOneManaged = function (req) {
  // do simple checks upfront and exit early
  if (!(req.query && req.query.SELECT) || typeof req.query === 'string') return
  if (!req.query.SELECT.orderBy && !req.query.SELECT.groupBy && !req.query.SELECT.where && !req.query.SELECT.having) {
    return
  }

  if (!req.target || !req.target.elements) return

  _convert(_getConvertibleEntries(req), req)
}

sqliteConvertAssocToOneManaged._initial = true

module.exports = sqliteConvertAssocToOneManaged
