const { Readable } = require('stream')

const _stream = val => {
  if (val === null) return null
  return new Readable({
    read(size) {
      if (val.length === 0) return this.push(null)
      const chunk = val.slice(0, size)
      val = val.slice(size)
      this.push(chunk)
    }
  })
}

const convertStream = (columns, target, result, one) => {
  if (!result || !columns || !target) return
  if (!Array.isArray(result)) result = [result]
  if (!result.length) return

  for (let col of columns) {
    let name = col.ref?.[col.ref.length - 1] || (typeof col === 'string' && col)
    const element = target.elements?.[name]
    if (!element) continue
    name = col.as || name
    if (element.isAssociation) {
      if (one) convertStream(col.expand, element._target, result[0][name], false)
      else
        result.forEach(row => {
          convertStream(col.expand, element._target, row[name], false)
        })
    } else if (element.type === 'cds.LargeBinary') {
      if (one) result[0][name] = _stream(result[0][name])
      else
        result.forEach(row => {
          row[name] = _stream(row[name])
        })
    }
  }
}

module.exports = { convertStream }
