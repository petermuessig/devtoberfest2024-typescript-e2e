const cds = require('../../cds')
const { cqn2cqn4sql } = require('../../common/utils/cqn2cqn4sql')
const { generateAliases } = require('../utils/generateAliases')

/**
 * Restores the link of `req.data` and `req.query` in case `req.query` was overwritten.
 * Only applicable for `UPDATE`s and `INSERT`s.
 *
 * @param { import('@sap/cds').Request } req
 */
const _restoreLink = req => {
  if (req.query.INSERT?.entries) {
    if (Array.isArray(req.query.INSERT.entries)) req.data = req.query.INSERT.entries[0]
    else req.data = req.query.INSERT.entries
  } else if (req.query.UPDATE?.data) {
    req.data = req.query.UPDATE.data
  }
}

const _isLinked = req => {
  if (req.query.INSERT?.entries) {
    // in case of more than one entry, the array reference stays in tact
    if (Array.isArray(req.query.INSERT.entries)) return req.data === req.query.INSERT.entries[0]
    return req.data === req.query.INSERT.entries
  }

  if (req.query.UPDATE?.data) {
    return req.data === req.query.UPDATE.data
  }

  return false
}

function handler(req) {
  if (typeof req.query === 'string') return

  // invoke req.subject and req.query.elements before it gets modified
  req.subject
  try {
    req.query.elements
  } catch {
    // ignore potential errors (no x4 support in req.query.elements)
  }

  if (!this.model) {
    // best-effort rewrite of path in from
    req.query = cqn2cqn4sql(req.query, { definitions: {} }, { service: this })
    return
  }

  const _streaming = cds.env.features.stream_compat && req.query._streaming

  // for restore link to req.data
  const linked = _isLinked(req)

  // convert to sql cqn
  req.query = cqn2cqn4sql(req.query, this.model, { service: this })

  // REVISIT: should not be necessary
  // restore link to req.data
  if (linked) _restoreLink(req)

  if (_streaming) req.query._streaming = _streaming
  generateAliases(req.query)
}

handler._initial = true
module.exports = handler
