/*
 * handler for converting virtual fields to { val: null, as: 'myVirtualField' } by READ
 */

const { ensureNoDraftsSuffix } = require('../../common/utils/draft')
const { getEntityNameFromCQN } = require('../../common/utils/entityFromCqn')

const _getElement = (ref, target, alias) =>
  alias
    ? (ref[0] === alias && target.elements[ref[1]]) || target.elements[ref[0]]
    : target.elements[ref[0]] || target.elements[ref[1]]

const _convert = (columns, target, model, alias) => {
  if (!target) return
  for (const col of columns) {
    if (!col.ref) continue
    const element = _getElement(col.ref, target, alias)
    if (element) {
      if (element.virtual) {
        col.as = col.as || col.ref[col.ref.length - 1]
        col.cast = { type: element._type }
        delete col.ref
        col.val = (element.default && element.default.val) || null
      }
      if (col.expand && element.isAssociation) {
        _convert(col.expand, model.definitions[element.target], model)
      }
    }
  }
}

const _convert4ref = (query, model) => {
  const { entityName, alias } = getEntityNameFromCQN(query)
  const columns = query.SELECT.columns || []
  const target = entityName && model.definitions[ensureNoDraftsSuffix(entityName)]
  if (target) _convert(columns, target, model, alias)
}

const _convert4union = (SELECT, model) => {
  for (const arg of SELECT.from.SET.args) {
    const { entityName, alias } = getEntityNameFromCQN(arg)
    const target = entityName && model.definitions[ensureNoDraftsSuffix(entityName)]
    if (target) {
      const columns = (arg.SELECT && arg.SELECT.columns) || []
      _convert(columns, target, model, alias)
    }
  }
}

const _convert4join = (SELECT, model) => {
  const columns = SELECT.columns || []
  for (const arg of SELECT.from.args) {
    const { entityName, alias } = getEntityNameFromCQN(arg)
    const target = entityName && model.definitions[ensureNoDraftsSuffix(entityName)]
    if (target) {
      _convert(columns, target, model, alias)
    }
  }
}

// REVISIT: Refactor to have a generic 'columns processor'
const _convertViruals = (query, model) => {
  if (!query.SELECT.from) return
  if (query.SELECT.from.SET) return _convert4union(query.SELECT, model)
  if (query.SELECT.from.args) return _convert4join(query.SELECT, model)
  if (query.SELECT.from.SELECT) {
    _convert4ref(query, model)
    return _convertViruals(query.SELECT.from, model)
  }
  return _convert4ref(query, model)
}

const convertVirtuals = function (req, _model) {
  const model = this.model || _model
  if (!model) return
  if (req.query.SELECT) _convertViruals(req.query, model)
}

convertVirtuals._initial = true

module.exports = {
  convertVirtuals
}
