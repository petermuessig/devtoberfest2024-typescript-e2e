const { getFlatArray, processCQNs } = require('../utils/deep')
const normalizeTimestamp = require('../../common/utils/normalizeTimestamp')
const { hasDeepDelete, getDeepDeleteCQNs, getSetNullParentForeignKeyCQNs } = require('../../common/composition')

const deleteFn = (executeDeleteCQN, executeUpdateCQN) => async (model, dbc, query, req) => {
  const { user, locale, timestamp } = req
  const isoTs = normalizeTimestamp(timestamp)

  let result
  if (model && hasDeepDelete(model, query)) {
    let cqns = await getDeepDeleteCQNs(model, req)

    // the delete chunks, i.e., how many deletes can be processed in parallel
    const chunks = []
    for (const each of cqns) {
      if (each.length) chunks.push(each.length)
    }

    cqns = getFlatArray(cqns)

    if (cqns.length === 0) return 0

    const results = await processCQNs(executeDeleteCQN, cqns, model, dbc, user, locale, isoTs, chunks)
    // return number of affected rows of "root cqn"
    result = results[results.length - 1]
  } else {
    result = await executeDeleteCQN(model, dbc, query, user, locale, isoTs)
    if (result && model) {
      const updateCQNs = await getSetNullParentForeignKeyCQNs(model, req)
      for (const cqn of updateCQNs) {
        await executeUpdateCQN(model, dbc, cqn, user, locale, isoTs)
      }
    }
  }

  return result
}

module.exports = deleteFn
