const cds = require('../../_runtime/cds')
const { where2obj } = require('../../_runtime/common/utils/cqn')
const { getKeysForNavigationFromRefPath } = require('../../_runtime/common/utils/keys')

// REVISIT: do we already have something like this _without using okra api_?
// REVISIT: should we still support process.env.CDS_FEATURES_PARAMS? probably nobody uses it...
const getKeysAndParamsFromPath = (from, srv) => {
  if (!from.ref || !from.ref.length) return {}

  const keys = {}
  const params = []

  const model = cds.context.model ?? srv.model

  let cur = model.definitions
  let lastElement

  for (let i = 0; i < from.ref.length; i++) {
    const ref = from.ref[i]
    const id = ref.id || ref
    lastElement = cur[id]
    const target = cur[id]._target ?? lastElement
    cur = target.elements

    if (i === from.ref.length - 1) {
      // last element
      if (ref.where) {
        const seg_keys = where2obj(ref.where)
        Object.assign(keys, seg_keys)
        params[i] = seg_keys.ID && Object.keys(seg_keys).length === 1 ? seg_keys.ID : seg_keys
      }
      if (lastElement.isAssociation && from.ref.length > 1) {
        // add keys for navigation from path
        const rootRef = from.ref[0]
        const rootTarget = model.definitions[rootRef.id || rootRef]
        const seg_keys = getKeysForNavigationFromRefPath(from.ref, rootTarget)
        // only take if a known property
        for (const k in seg_keys) if (k in cur) keys[k] = seg_keys[k]
      }
    } else if (ref.where) {
      const seg_keys = where2obj(ref.where)
      params[i] = seg_keys.ID && Object.keys(seg_keys).length === 1 ? seg_keys.ID : seg_keys
    }
  }

  return { keys, params }
}

module.exports = {
  getKeysAndParamsFromPath
}
